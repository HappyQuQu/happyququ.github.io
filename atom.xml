<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qu Blog]]></title>
  <link href="https://blog.qudev.top/atom.xml" rel="self"/>
  <link href="https://blog.qudev.top/"/>
  <updated>2019-10-28T20:14:38+08:00</updated>
  <id>https://blog.qudev.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[树莓派下搭建NextCloud云盘]]></title>
    <link href="https://blog.qudev.top/15670843229326.html"/>
    <updated>2019-08-29T21:12:02+08:00</updated>
    <id>https://blog.qudev.top/15670843229326.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">前言</h2>

<p>最近买了树莓派4B,USB 有两个接口升级成了USB3.0,有线网口也升级成了千兆网络,这么好的硬件,不拿来干点事情有点浪费了,所以准备搭建 NextCloud 网盘来临时充当个人网盘使用.<br/>
<span id="more"></span><!-- more --></p>

<h2 id="toc_1">安装 PHP</h2>

<p>Raspbian 最新的系统源里面默认最新的是 PHP7.1,NextCloud 推荐使用7.3.所以我们首先需要把源更新成最新的</p>

<h3 id="toc_2">安装软件源拓展工具</h3>

<pre><code class="language-bash">sudo apt -y install software-properties-common apt-transport-https lsb-release ca-certificates
</code></pre>

<h3 id="toc_3">添加 GPG</h3>

<pre><code class="language-bash">sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://mirror.xtom.com.hk/sury/php/apt.gpg
</code></pre>

<h3 id="toc_4">添加 Sury 软件源</h3>

<pre><code class="language-bash">sudo sh -c &#39;echo &quot;deb https://mirror.xtom.com.hk/sury/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list&#39;  
</code></pre>

<h3 id="toc_5">安装 PHP7.3</h3>

<pre><code class="language-bash">sudo apt update
sudo apt install -y php7.3-fpm php7.3-mysql php7.3-curl php7.3-gd php7.3-json php7.3-xml php7.3-zip php7.3-mbstring openssl
</code></pre>

<h3 id="toc_6">配置 PHP</h3>

<p>安装 PHP7.3 和 NextCloud 需要用的相关组件.安装完成后修改 <code>php.ini</code> 文件</p>

<pre><code class="language-bash">sudo vim /etc/php/7.3/php.ini
</code></pre>

<p>找到<code>;cgi.fix_pathinfo=1</code>,把<code>;</code>去掉,然后把·改成0</p>

<h3 id="toc_7">PHP 服务相关</h3>

<p>将 php-fpm 设置为自启动</p>

<pre><code class="language-bash">sudo systemctl enable php7.3-fpm
</code></pre>

<p>启用 php7.3-fpm </p>

<pre><code class="language-bash">sudo service php7.3-fpm start
</code></pre>

<p>重启 php-7.3fpm</p>

<pre><code class="language-bash">sudo service php7.3-fpm restart
</code></pre>

<p>停止 php7.3-fpm</p>

<pre><code class="language-bash">sudo service php7.3-fpm stop
</code></pre>

<h2 id="toc_8">安装 Nginx</h2>

<h3 id="toc_9">安装 Nginx</h3>

<pre><code class="language-bash">sudo apt install -y nginx
</code></pre>

<p>打开地址<code>http://树莓派ip/</code>出现一下界面说明安装成功<br/>
<img src="media/15670843229326/index-nginx.png" alt="index-nginx"/></p>

<h3 id="toc_10">Nginx 服务相关</h3>

<p>将 Nginx 设置为自启动</p>

<pre><code class="language-bash">sudo systemctl enable nginx
</code></pre>

<p>启用 Nginx</p>

<pre><code class="language-bash">sudo service nginx start
</code></pre>

<p>重启 Nginx</p>

<pre><code class="language-bash">sudo service nginx restart
</code></pre>

<p>停止 Nginx</p>

<pre><code class="language-bash">sudo service nginx stop
</code></pre>

<h2 id="toc_11">安装 MariaDB</h2>

<h3 id="toc_12">安装 MariaDB</h3>

<pre><code class="language-bash">sudo apt install -y mariadb-server
</code></pre>

<h3 id="toc_13">初始化 MariaDB</h3>

<pre><code class="language-bash">sudo mysql_secure_installation
</code></pre>

<p>首先会让你输入当前 <code>root</code> 密码,因为没有 <code>root</code> 密码,直接回车.<br/>
<img src="media/15670843229326/mariadb1.png" alt="mariadb1"/></p>

<p>然后初始化 <code>root</code> 密码,<br/>
<img src="media/15670843229326/mariadb2.png" alt="mariadb2"/><br/>
然后剩余选项全都默认回车就行了.当看见以后提示,说明初始化完成<br/>
<img src="media/15670843229326/mariadb3.png" alt="mariadb3"/></p>

<p>登陆 MariaDB 数据库</p>

<pre><code class="language-bash">sudo -uroot -p
</code></pre>

<p>如果出现登录失败的错误,重启下 <code>MariaDB</code> 服务器后重新登陆就行了</p>

<h2 id="toc_14">安装 NextCloud</h2>

<h3 id="toc_15">安装 NextCloud</h3>

<p>下载安装包</p>

<pre><code class="language-bash">sudo wget https://download.nextcloud.com/server/releases/nextcloud-16.0.4.zip
</code></pre>

<p>解压 NextCloud 安装包,移动到 Nginx 的 <code>web</code> 根目录下,我的根目录一般设置成 <code>/var/www/</code></p>

<pre><code class="language-bash">sudo unzip nextcloud-16.0.4.zip
sudo mv nextcloud /var/www/
</code></pre>

<p>给 Nginx 的默认用户赋予读写 <code>nextcloud</code> 文件夹的权限</p>

<pre><code class="language-bash">sudo chown -R www-data /var/www/nextcloud
</code></pre>

<h3 id="toc_16">配置 Nginx</h3>

<p>修改 <code>nginx.conf</code> 全局配置文件</p>

<pre><code class="language-bash">sudo vim /etc/nginx/nginx.conf
</code></pre>

<p>找到 <code>include /etc/nginx/sites-enabled/*;</code> 注释掉.</p>

<p>因为我要启用 https 所以我把 ssl 的证书也配置在全局文件里面了,这样子所有的子文件夹都开启 ssl 了.添加 ssl 设置,证书在 <code>cert</code> 文件夹内</p>

<pre><code class="language-text">ssl on;
ssl_certificate   cert/2296431_123.abc.com.pem;
ssl_certificate_key  cert/2296431_123.abc.com.key;
ssl_session_timeout 5m;
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
</code></pre>

<p>接下来从默认配置文件文件里面复制一个,到 <code>/etc/nginx/conf.d/</code> 文件夹下,并且重命名为 <code>default.conf</code> ,然后编辑</p>

<pre><code class="language-bash">sudo cp /etc/nginx/sites-available/default  /etc/nginx/conf.d/default.conf
sudo vim etc/nginx/conf.d/default.conf
</code></pre>

<p>修改内容参考 NextCloud 官网的Nginx配置文件,因为我 Nginx 下面还要挂载其他网页,所以我选择子目录的配置文件.下面是我的配置文件</p>

<pre><code class="language-text">upstream php-handler {
    server unix:/var/run/php/php7.3-fpm.sock;
}
server {
    listen 80;
    listen [::]:80;
    server_name 123.abc.com;
    return 301 https://$server_name:$server_port$request_uri;
}
server {
    listen 8082 ssl http2;
    listen [::]:8082 ssl http2;
    server_name 123.abc.com;
    add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection &quot;1; mode=block&quot;;
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Referrer-Policy no-referrer;
    fastcgi_hide_header X-Powered-By;

    root /var/www;
    index index.html index.htm index.php;

    #NextCloud
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    location = /.well-known/carddav {
        return 301 $scheme://$host:$server_port/nextcloud/remote.php/dav;
    }
    location = /.well-known/caldav {
        return 301 $scheme://$host:$server_port/nextcloud/remote.php/dav;
    }
    location /.well-known/acme-challenge { }
    location ^~ /nextcloud {
        client_max_body_size 10G;
        fastcgi_buffers 64 4K;
        gzip on;
        gzip_vary on;
        gzip_comp_level 4;
        gzip_min_length 256;
        gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
        gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;
        location /nextcloud {
            rewrite ^ /nextcloud/index.php$request_uri;
        }
        location ~ ^\/nextcloud\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
            deny all;
        }
        location ~ ^\/nextcloud\/(?:\.|autotest|occ|issue|indie|db_|console) {
            deny all;
        }
        location ~ ^\/nextcloud\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {
            fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param HTTPS on;
            fastcgi_param modHeadersAvailable true;
            fastcgi_param front_controller_active true;
            fastcgi_pass php-handler;
            fastcgi_intercept_errors on;
            fastcgi_request_buffering off;
        }
        location ~ ^\/nextcloud\/(?:updater|oc[ms]-provider)(?:$|\/) {
            try_files $uri/ =404;
            index index.php;
        }
        location ~ ^\/nextcloud\/.+[^\/]\.(?:css|js|woff2?|svg|gif|map)$ {
            try_files $uri /nextcloud/index.php$request_uri;
            add_header Cache-Control &quot;public, max-age=15778463&quot;;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection &quot;1; mode=block&quot;;
            add_header X-Robots-Tag none;
            add_header X-Download-Options noopen;
            add_header X-Permitted-Cross-Domain-Policies none;
            add_header Referrer-Policy no-referrer;
            access_log off;
        }
        location ~ ^\/nextcloud\/.+[^\/]\.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ {
            try_files $uri /nextcloud/index.php$request_uri;
            access_log off;
        }
    }
}
</code></pre>

<ul>
<li><code>server_name</code> 直接填你申请好的域名</li>
<li><code>listen 8082</code> 因为树莓派是放在家里的,家用宽带是封掉<code>443</code>,<code>80</code>端口的,所以我就把端口改为<code>8082</code>然后在路由器上做端口转发</li>
</ul>

<p>检测下 Nginx 配置是否检验通过</p>

<pre><code class="language-text">sudo nginx -t
</code></pre>

<p>如果出现下面的提示,说明配置文件通过检验,否则修改配置文件中报错的地方<br/>
<img src="media/15670843229326/nginx_test.png" alt="nginx_test"/></p>

<p>然后重新加载下 Nginx</p>

<pre><code class="language-bash">sudo nginx -s reload
</code></pre>

<h3 id="toc_17">配置 MariaDB 数据库</h3>

<p>进入 MySQL</p>

<pre><code class="language-bash">sudo mysql -u root -p
</code></pre>

<p>创建 NextCloud 数据库</p>

<pre><code class="language-sql"># 创建一个名为 nextclud_db 的数据库
CREATE DATABASE nextcloud_db;

# 创建一个名为 nextcloud、密码也为 nextcloud 的用户
CREATE USER &#39;nextcloud&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;nextcloud&#39;;

# 赋予用户 nextcloud 对数据库 nextcloud_db 的所有操作权限
GRANT ALL PRIVILEGES ON nextcloud_db.* TO &#39;nextcloud&#39;@&#39;localhost&#39;;

# 刷新数据库权限
FLUSH PRIVILEGES;

# 退出
exit
</code></pre>

<h3 id="toc_18">配置 NextCloud</h3>

<p>打开 <code>https://123.abc.com:8082/nextcloud</code> 进入 NextCloud 配置界面<br/>
<img src="media/15670843229326/nextcloud.png" alt="nextcloud"/></p>

<p>新建一个用户名和密码.数据目录可以默认,也可以自己自定义目录,但是注意自定义目录记得要赋予 <code>www-data</code> 读写权限.<br/>
数据库用户,密码和数据库名就是刚才 MariaDB 新建的信息,确认没有问题后点完成,过一会就可以进入网盘了</p>

<h2 id="toc_19">优化 NextCloud</h2>

<h3 id="toc_20">优化 NextCloud</h3>

<p>进入设置-&gt;概括里面,NextCloud 会检查安全及设置警告,刚刚进入 NextCloud 后检查完出现4个问题.我们一个一个解决<br/>
<img src="media/15670843229326/nextcloud_check1.png" alt="nextcloud_check1"/></p>

<ol>
<li><p>PHP 的安装似乎不正确,无法访问系统环境变量.<code>getenv(&quot;PATH&quot;)</code> 函数测试返回一个空值.<br/>
编辑 <code>sudo vim /etc/php/7.3/fpm/pool.d/www.conf</code>,取消下面几个参数的注释</p>
<pre><code class="language-text">;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin<br/>
;env[TMP] = /tmp<br/>
;env[TMPDIR] = /tmp<br/>
;env[TEMP] = /tmp
</code></pre>
<p><img src="media/15670843229326/www.conf.png" alt="www.conf"/></p></li>
<li><p>PHP 内存限制低于建议值<code>512MB</code><br/>
编辑 <code>sudo vim /etc/php/7.3/fpm/php.ini</code>,找到 <code>memory_limit = 128M</code>，将<code>128M</code> 修改是<code>512M</code></p></li>
<li><p>内存缓存为配置<br/>
这个单独讲</p></li>
<li><p>该实例缺失了一些推荐的 PHP 模块<br/>
缺少什么模块我们就补齐</p>
<pre><code class="language-bash">sudo apt install php7.3-intl php7.3-imagick
</code></pre>
<h2 id="toc_21">Redis 内存缓存配置</h2>
<p>这边我们使用 Redis 来配置内存缓存</p></li>
</ol>

<h3 id="toc_22">安装 Redis</h3>

<p>安装 Redis 和 PHP Redis 模块</p>

<pre><code class="language-bash">sudo apt install redis-server php7.3-redis
</code></pre>

<h3 id="toc_23">配置 Redis</h3>

<p>编辑 <code>sudo vim /etc/redis.conf</code>,将下列参数修改如下配置</p>

<pre><code class="language-text">port 0
unixsocket /var/run/redis/redis-server.sock
unixsocketperm 777
requirepass qwerasdf
</code></pre>

<p>把 redis 添加进相应的用户组</p>

<pre><code class="language-bash">sudo usermod -g www-data redis
</code></pre>

<h3 id="toc_24">配置 NextCloud</h3>

<p>编辑 <code>sudo vim /var/www/nextcloud/config/config.php</code>,在 <code>&#39;installed&#39; =&gt; true</code>,下面添加如下配置</p>

<pre><code class="language-php">&#39;filelocking.enabled&#39; =&gt; &#39;true&#39;,
&#39;memcache.locking&#39; =&gt; &#39;\OC\Memcache\Redis&#39;,
&#39;memcache.local&#39; =&gt; &#39;\OC\Memcache\Redis&#39;,
&#39;memcache.distributed&#39; =&gt; &#39;\OC\Memcache\Redis&#39;,
&#39;redis&#39; =&gt; array (
    &#39;host&#39; =&gt; &#39;/var/run/redis/redis-server.sock&#39;, // can also be a unix domain socket: &#39;/tmp/redis.sock&#39;
    &#39;port&#39; =&gt; 0,
    &#39;timeout&#39; =&gt; 0.0,
    &#39;password&#39; =&gt; &#39;qwerasdf&#39;, // Optional, if not defined no password will be used.
    &#39;dbindex&#39; =&gt; 0, 
),
</code></pre>

<h3 id="toc_25">Redis 服务相关</h3>

<p>将 Redis 设置为自启动</p>

<pre><code class="language-bash">sudo systemctl enable redis-server
</code></pre>

<p>启用 Redis</p>

<pre><code class="language-bash">sudo service redis-server start
</code></pre>

<p>重启 Redis</p>

<pre><code class="language-bash">sudo service redis-server restart
</code></pre>

<p>停止 Redis</p>

<pre><code class="language-bash">sudo service redis-server stop
</code></pre>

<h2 id="toc_26">NextCloud 检查通过</h2>

<p><img src="media/15670843229326/nextcloud_check_success.png" alt="nextcloud_check_success"/></p>

<h2 id="toc_27">参考</h2>

<p><a href="https://www.mf8.biz/debian-install-php7-2/">在 Ubuntu/Debian 下安装 PHP7.2</a><br/>
<a href="https://docs.nextcloud.com/server/16/admin_manual/installation/source_installation.html">Prerequisites for manual installation</a><br/>
<a href="https://www.wenjinyu.me/zh/install-nextcloud-to-build-a-proprietary-personal-netdisk/">安装nextcloud：搭建一个自己专属的个人网盘</a><br/>
<a href="https://www.jianshu.com/p/843af0af176e">使用NextCloud 12 搭建私人云服务和问题解决</a><br/>
<a href="https://www.himstudy.net/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7nextcloud-16%E5%90%8E%EF%BC%8C%E6%8F%90%E7%A4%BAphp-%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6%E4%BD%8E%E4%BA%8E%E5%BB%BA%E8%AE%AE%E5%80%BC-512mb%E3%80%82/">解决升级nextcloud-16后，提示php-内存限制低于建议值-512mb</a><br/>
<a href="https://docs.nextcloud.com/server/16/admin_manual/configuration_files/files_locking_transactional.html">Transactional file locking</a><br/>
<a href="https://www.wenjinyu.me/zh/deal-with-nextcloud-warning-memory-cache-is-not-configured/">解决nextcloud警告：“内存缓存未配置”</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[frp 内网穿透服务搭建]]></title>
    <link href="https://blog.qudev.top/15592789505554.html"/>
    <updated>2019-05-31T13:02:30+08:00</updated>
    <id>https://blog.qudev.top/15592789505554.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">前言</h3>

<p>最近老是要远程到公司的办公网络处理事情,公司虽然有 VPN 可以连接到公司内网,但是 MacOS 下无法连接 PPTP 的 VPN 所以想搭建一个内网穿透的服务,首先想到的就是最近比较火的 frp </p>

<p>frp 需要一台公网服务器,因为我平时几乎不会用到 VPS,所以单纯为了 frp 去买一个 VPS 有点浪费,因此想到了把 frp 服务部署在路由器上,我家的路由是梅林系统<br/>
<span id="more"></span><!-- more --></p>

<h3 id="toc_1">准备工作</h3>

<ul>
<li>一台支持的路由器(我的是6300v2,梅林系统)</li>
<li>路由器连接的网络具有公网 IP(我们这里电信直接打电话就行了)</li>
</ul>

<h3 id="toc_2">在路由器上部署 frps 服务端</h3>

<p>首先在 frp 的 <a href="https://github.com/fatedier/frp/releases">github</a> 官网上下载对应系统的文件包,梅林系统的下载后缀位 <code>arm</code> 的文件包</p>

<p>解压后将 frps 文件通过软件中心的 webshell 程序上传到路由器 <code>/tmp/</code> 目录下,然后移到软件目录下</p>

<pre><code class="language-text">mv /tmp/frps /jffs/.koolshare/bin/ 
</code></pre>

<p>不要放在 <code>/tmp/</code> 和下级目录下,重启或清空所有文件的</p>

<p>在本地编辑 <code>frps.ini</code> 配置文件,我的配置如下</p>

<pre><code class="language-text"># [common] is integral section
[common]
# A literal address or host name for IPv6 must be enclosed
# in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;
#bind_addr = 0.0.0.0
bind_port = 1234

# udp port to help make udp hole to penetrate nat
bind_udp_port = 1235

# udp port used for kcp protocol, it can be same with &#39;bind_port&#39;
# if not set, kcp is disabled in frps
kcp_bind_port = 1234

# specify which address proxy will listen for, default value is same with bind_addr
# proxy_bind_addr = 127.0.0.1

# if you want to support virtual host, you must set the http port for listening (optional)
# Note: http port and https port can be same with bind_port
#vhost_http_port = 80
#vhost_https_port = 443

# response header timeout(seconds) for vhost http server, default is 60s
# vhost_http_timeout = 60

# set dashboard_addr and dashboard_port to view dashboard of frps
# dashboard_addr&#39;s default value is same with bind_addr
# dashboard is available only if dashboard_port is set
#dashboard_addr = 0.0.0.0
dashboard_port = 12346

# dashboard user and passwd for basic auth protect, if not set, both default value is admin
dashboard_user = admin
dashboard_pwd = admin

# dashboard assets directory(only for debug mode)
# assets_dir = ./static
# console or real logFile path like ./frps.log
log_file = /tmp/frps.log

# trace, debug, info, warn, error
log_level = info

log_max_days = 3

# auth token
token = 123

# heartbeat configure, it&#39;s not recommended to modify the default value
# the default value of heartbeat_timeout is 90
# heartbeat_timeout = 90

# only allow frpc to bind ports you list, if you set nothing, there won&#39;t be any limit
#allow_ports = 2000-3000,3001,3003,4000-50000

# pool_count in each proxy will change to max_pool_count if they exceed the maximum value
max_pool_count = 5

# max ports can be used for each client, default value is 0 means no limit
max_ports_per_client = 0

# if subdomain_host is not empty, you can set subdomain when type is http or https in frpc&#39;s configure file
# when subdomain is test, the host used by routing is test.frps.com
#subdomain_host = frps.com

# if tcp stream multiplexing is used, default is true
tcp_mux = true

# custom 404 page for HTTP requests
# custom_404_page = /path/to/404.html

</code></pre>

<ul>
<li>bind_port 自己定义一个端口</li>
<li>dashboard_port 访问网页版仪表板的端口号</li>
<li>log_file 日志路径,我这里设置的是 <code>/tmp/frps.log</code></li>
<li>token 与客户端连接的密钥,自己定义一个</li>
</ul>

<p>将 <code>frps.ini</code> 上传到路由器上,然后移动配置目录下</p>

<pre><code class="language-text"> mv /tmp/frps.ini /jffs/configs/frps.ini 
</code></pre>

<p>给 frps 文件赋予777权限,然后直接运行,看下能否正常运行</p>

<pre><code class="language-text">chmod 777 /jffs/.koolshare/bin/frps
/jffs/.koolshare/bin/frps -c /jffs/configs/frps.ini
</code></pre>

<p>查看运行日志,看下服务是否正常运行,如果日志中出现 <code>Start frps success</code>,说明运行成功</p>

<pre><code class="language-text">cat /tmp/frps.log
</code></pre>

<p>这时候内网是可以指连接 frps 服务的,但是外网连接的话,端口被防火墙挡住了,所以需要开放frps的端口.</p>

<p>首先打开 jffs 功能，然后在 <code>/jffs/script/</code> 下新建一个文件,名为 <code>firewall-start</code>, 并赋予<code>755</code>权限,写入内容如下</p>

<pre><code class="language-text">#!/bin/sh
iptables -I INPUT -p tcp --dport 1234 -j ACCEPT
iptables -I INPUT -p udp --dport 1235 -j ACCEPT
iptables -I INPUT -p tcp --dport 1236 -j ACCEPT
</code></pre>

<p>重启路由器即可。</p>

<p>本来应该接下来要写如何把 frps 设后台运行和自启动的,但是发现不知道是路由cpu不行还是内存太小,导致在后台运行一段时间之后,会出现路由器断网,卡住的情况,所以直接把 frps 服务部署到树莓派上了.<br/>
如果没有树莓派,想路由器上后台运行 frps 的话,大家自己 Google 下梅林设置后台运行的方法</p>

<h3 id="toc_3">在树莓派上部署 frps 服务端</h3>

<p>树莓派的 frp 版本跟梅林的一样,所以不需要重新下载了</p>

<p>首先先在本地修改下 frps.ini 里面的配置,其实也没有啥修改的,就是把日志的路径改一下改成 <code>log_file = ./frps.log</code></p>

<p>在树莓派上新建一个 <code>frps</code> 目录,然后把 <code>frps</code> 和 <code>frps.ini</code> 文件上传到树莓派的 <code>frps</code> 目录下</p>

<p>给 frps 文件赋予777权限,然后直接运行,看下能否正常运行</p>

<pre><code class="language-text">chmod 777 /home/pi/frps/frps
/home/pi/frps/frps -c /home/pi/frps/frps.ini
</code></pre>

<p>查看运行日志,看下服务是否正常运行,如果日中中出现 <code>Start frps success</code>,说明运行成功</p>

<pre><code class="language-text">cat ~/frps/frps.log
</code></pre>

<h3 id="toc_4">配置自动启用服务</h3>

<p>首先先建一个 frps 的服务</p>

<pre><code class="language-text">sudo vim /lib/systemd/system/frps.service
</code></pre>

<p>在 frps.service 里写入以下内容</p>

<pre><code class="language-text">[Unit]
Description=fraps service
After=network.target network-online.target syslog.target
Wants=network.target network-online.target

[Service]
Type=simple

#启动服务的命令（此处写你的frps的实际安装目录）
ExecStart=/home/pi/frps/frps -c /home/pi/frps/frps.ini

[Install]
WantedBy=multi-user.target
</code></pre>

<p>然后启用 frps 服务</p>

<pre><code class="language-text">sudo service frps start
</code></pre>

<p>确认没有问题后,开启自启动</p>

<pre><code class="language-text">sudo systemctl enable frps
</code></pre>

<p>还有一些服务常用的命令</p>

<ul>
<li>启用服务 <code>sudo service frps start</code></li>
<li>停止服务 <code>sudo service frps stop</code></li>
<li>重启服务 <code>sudo service frps restart</code></li>
<li>查看服务 <code>sudo service frps status</code></li>
</ul>

<h3 id="toc_5">路由器端口映射</h3>

<p>在路由器端口转发下面,映射 frps.ini 配置里面的几个端口,使其能够在外网能够访问,外网通过 ddns 域名:1236 端口访问网页版的 Dashoard,输入账号密码查看frps 服务状态</p>

<p>就此 frp 的服务端配置完成</p>

<h3 id="toc_6">客户端配置</h3>

<p>客户端配置很简单,我公司电脑是 Windows 的,所有下载 <code>windows_amd64</code> 后缀的 frp 文件包,解压缩后放在任意位置,开打文件夹里面的 <code>frpc.ini</code> 修改配置,我的配置如下</p>

<pre><code class="language-text">[common]
server_addr = 1.2.3.4
server_port = 1234

# for authentication
token = 123

#http_proxy = http://127.0.0.1:1080

log_file = C:\\Users\\Qu\\Application\\frp\\frpc.log

# trace, debug, info, warn, error
log_level = info

log_max_days = 3

# if tcp stream multiplexing is used, default is true, it must be same with frps
#tcp_mux = true

# set admin address for control frpc&#39;s action by http api such as reload
admin_addr = 127.0.0.1
admin_port = 7400
admin_user = admin
admin_pwd = admin

[RDP]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 33890
</code></pre>

<ul>
<li>server_addr 配置你 frps 的 ddns 域名</li>
<li>server_port 与 frps 配置里面的 bind_port 一致</li>
<li>token 也是与 frps 配置里面的 token 一致</li>
<li>log_file 我这里没有写 ./frpc.log,因为如果配置自启动的话会把日志文件写在自启动文件夹下,开机会把日志弹出来</li>
</ul>

<p>因为我是要远程桌面到公司的电脑,所以我配置了一个 <code>RDP</code> 的节点,映射本地远程端口 3389 到 33890 这样,我在外网远程公司电脑,就只需要域名:33890 就可以</p>

<pre><code class="language-text">[RDP]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 33890
</code></pre>

<p>然后在 cmd 里面运行 frpc 查看 <code>frpc.log</code> 文件,如果看到 <code>[RDP] start proxy success</code> 就说明已经跟 frps 服务连接成功,这时候就可以远程公司电脑了</p>

<pre><code class="language-text">cd C:\Users\Qu\Application\frp
./frpc.exe -c ./frpc.ini
</code></pre>

<h3 id="toc_7">配置 frpc 自启用</h3>

<p>在文件夹下新建一个 <code>frpc.vbs</code> 内容为</p>

<pre><code class="language-text">set ws=WScript.CreateObject(&quot;WScript.Shell&quot;) 
ws.Run &quot;C:\Users\Qu\Application\frp\frpc.exe -c C:\Users\Qu\Application\frp\frpc.ini&quot;,0
</code></pre>

<p>Run 里面的路径改成你们自己的 frpc 的路径,然后保存.</p>

<p>按 <code>win+R</code> 输入 <code>shell:startup</code> 将 <code>frpc.vbs</code> 放到文件夹下就可以自启动了</p>

<h4 id="toc_8">参考</h4>

<ul>
<li><a href="https://github.com/fatedier/frp/releases">Github-frp</a></li>
<li><a href="http://koolshare.cn/thread-49601-1-1.html">[固件讨论] 梅林如何设置防火墙开通6800端口</a></li>
<li><a href="https://www.jianshu.com/p/b64f268dddc9">frp实现内网穿透并配置自动启动</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决原生 Android Wi-Fi图标上显示 x 小图标]]></title>
    <link href="https://blog.qudev.top/15542211549503.html"/>
    <updated>2019-04-03T00:05:54+08:00</updated>
    <id>https://blog.qudev.top/15542211549503.html</id>
    <content type="html"><![CDATA[
<p>终端输入<code>adb shell settings put global captive_portal_https_url https://www.google.cn/generate_204</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server 大文件处理]]></title>
    <link href="https://blog.qudev.top/15329576127138.html"/>
    <updated>2018-07-30T21:33:32+08:00</updated>
    <id>https://blog.qudev.top/15329576127138.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">osql -S SQL2012\SQL2012,2099 -d TESTDB  -U TESTUSER -P TESTPASSWD -i C:\dbo.HEAD.Table.sql
</code></pre>

<span id="more"></span><!-- more -->

<ul>
<li><code>-S</code>服务器地址</li>
<li><code>-d</code>数据库名称</li>
<li><code>-U</code>用户名</li>
<li><code>-P</code>密码</li>
<li><code>-i</code>文件路径</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派下搭建PT/BT下载器]]></title>
    <link href="https://blog.qudev.top/15291175282135.html"/>
    <updated>2018-06-16T10:52:08+08:00</updated>
    <id>https://blog.qudev.top/15291175282135.html</id>
    <content type="html"><![CDATA[
<p>因为申请到一个PT账号,所以买了个树莓派准备做下载机,一般Linux下面比较有名的BT/PT下载软件是Transmission.这次我也以Transmission作为默认下载软件<br/>
<span id="more"></span><!-- more --></p>

<h2 id="toc_0">安装Transminssion</h2>

<p>一般默认的源里面就有所以直接下载</p>

<pre><code class="language-bash">sudo apt-get update
sudo apt-get install -y transmission-daemon
</code></pre>

<h2 id="toc_1">修改默认配置文件</h2>

<pre><code class="language-bash">sudo vim /etc/transmission-daemon/settings.json
</code></pre>

<p>配置比较多但是其实只要配置几个关键的点就行了</p>

<h4 id="toc_2">下载目录</h4>

<p>我的下载目录是挂载的一块3T的硬盘</p>

<pre><code class="language-javascript">&quot;download-dir&quot;: &quot;/home/pi/pt/complete&quot;,
</code></pre>

<h4 id="toc_3">未完成目录</h4>

<pre><code class="language-javascript">&quot;incomplete-dir&quot;: &quot;/home/pi/pt/incomplete&quot;,
</code></pre>

<h4 id="toc_4">远程控制管理</h4>

<pre><code class="language-javascript">&quot;rpc-whitelist&quot;: &quot;127.0.0.1&quot;,
&quot;rpc-whitelist-enabled&quot;: false,
</code></pre>

<p>如果想指定特定IP管理的话可以把<code>rpc-whitelist</code>设置成<code>192.168.1.*</code>.<br/>
我的话没有修改,而是直接把<code>rpc-whitelist-enabled</code>改成<code>false</code>,这样就不走白名单模式</p>

<h4 id="toc_5">远程用户名密码</h4>

<pre><code class="language-javascript">&quot;rpc-username&quot;: &quot;transmission&quot;,
&quot;rpc-password&quot;: &quot;123456&quot;,
</code></pre>

<p>密码是加密的,没关系直接把密码改为你想要的密码明文就可以,重启服务后会自动帮你加密</p>

<h4 id="toc_6">重载配置和服务</h4>

<pre><code class="language-bash">sudo service transmission-daemon reload
sudo service transmission-daemon restart
</code></pre>

<p>注意以下两个命令按顺序执行,单独restart的话配置不会保存</p>

<h2 id="toc_7">远程管理</h2>

<p>浏览器中访问IP加9091端口：比如:<a href="http://192.168.1.200:9091/">http://192.168.1.200:9091/</a>.<br/>
输入你配置的用户名密码直接可以程管理</p>

<p><img src="media/15291175282135/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2011.14.12.png" alt="屏幕快照 2018-06-16 11.14.12"/></p>

<p>网页管理比较简单,我一般都是用远程客户端管理的</p>

<h4 id="toc_8">桌面客户端</h4>

<p>Mac和Win可以用开源的TransGUI来管理,下载地址:<a href="https://github.com/transmission-remote-gui/transgui/releases">点我</a> </p>

<p><img src="media/15291175282135/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2011.19.44.png" alt="屏幕快照 2018-06-16 11.19.44"/></p>

<h4 id="toc_9">Android客户端</h4>

<p>安卓的话我用Transmission Remote,下载地址:<a href="https://play.google.com/store/apps/details?id=net.yupol.transmissionremote.app">点我</a></p>

<p><img src="media/15291175282135/unnamed.png" alt="unnamed"/></p>

<p>貌似Transdroid也不错,下载地址:<a href="http://www.transdroid.org">点我</a><br/>
<img src="media/15291175282135/transdroid-2.5.1-main-576x1024.png" alt="transdroid-2.5.1-main-576x1024"/></p>

<h4 id="toc_10">外网管理</h4>

<p>如果想外网管理的话需要在路由器上做端口转发,把9091映射成你想要端口</p>

<p><img src="media/15291175282135/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2011.26.02.png" alt="屏幕快照 2018-06-16 11.26.02"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下给移动硬盘分区]]></title>
    <link href="https://blog.qudev.top/15291142264885.html"/>
    <updated>2018-06-16T09:57:06+08:00</updated>
    <id>https://blog.qudev.top/15291142264885.html</id>
    <content type="html"><![CDATA[
<p>最近申请到了一个PT账号,所以买了个树莓派准备把一块3T的闲置硬盘(当初准备放在PS4做外置硬盘的)挂在树莓派上做下载机.</p>

<p>一开始用的NTFS格式,但是查了下发现Linux下挂在NTFS兼容性不是很好,而且资源占用比较多,所以准备重新格式化一下(下面截图是在虚拟机下演示操作的)<br/>
<span id="more"></span><!-- more --></p>

<h2 id="toc_0">查看磁盘信息</h2>

<p>命令<code>lsblk</code>可以查看目前挂在的硬盘,<code>sdb</code>就是挂载的USB硬盘</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.12.06.png" alt="屏幕快照 2018-06-16 10.12.06"/></p>

<h2 id="toc_1">分区</h2>

<pre><code class="language-bash">sudo fdisk /dev/sdb
</code></pre>

<p>进入分区模式</p>

<p>输入<code>m</code>来查看帮助信息</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.17.09.png" alt="屏幕快照 2018-06-16 10.17.09"/></p>

<p><code>n</code>新建分区,因为我是只分一个区所以一路按回车默认就行了</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.19.42.png" alt="屏幕快照 2018-06-16 10.19.42"/></p>

<p><code>w</code>保存并退出分区管理</p>

<h2 id="toc_2">格式化硬盘</h2>

<p>格式化硬盘,EXT3格式</p>

<pre><code class="language-bash">sudo mkfs -t ext3 /dev/sdb
</code></pre>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.23.32.png" alt="屏幕快照 2018-06-16 10.23.32"/></p>

<h2 id="toc_3">挂载硬盘</h2>

<pre><code class="language-bash">sudo mkdir /home/qu/usbdisk
sudo mount /dev/sdb /home/qu/usbdisk
</code></pre>

<p>上面是临时挂载的移动硬盘,如果想自动挂载的话可以修改<code>/etc/fstab</code>文件</p>

<pre><code class="language-bash">sudo vim /etc/fstab
</code></pre>

<p>在最后插入一行</p>

<p><code>/dev/sdb/ /home/qu/usbdisk ext3 default 0 0</code></p>

<p>如果有多个硬盘的话,这里的 <code>/dev/sdb</code> 建议改成使用硬盘的 <code>UUID</code> 来绑定.<br/>
获取硬盘的 <code>UUID</code></p>

<pre><code class="language-bash">blkid /dev/sdb
</code></pre>

<p>将原来的 <code>fstab</code> 里面的 <code>/dev/sdb</code> 改成</p>

<pre><code class="language-bash">UUID=&quot;5594295a-3848-41a5-9441-2e70a0c1310f&quot;  /home/qu/usbdisk ext3 default 0 0
</code></pre>

<p>下回系统重启之后就会自动将/dev/sdb磁盘挂载到/home/qu/usbdisk目录下了,格式为EXT3</p>

<p>第一个<code>0</code>:能否被dump备份命令作用:dump是一个用来作为备份的命令.通常这个参数的值为0或者1</p>

<table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>代表不要做dump备份</td>
</tr>
<tr>
<td>1</td>
<td>代表要每天进行dump的操作</td>
</tr>
<tr>
<td>2</td>
<td>代表不定日期的进行dump操作</td>
</tr>
</tbody>
</table>

<p>第二个<code>0</code>:是否检验扇区:开机的过程中,系统默认会以fsck检验我们系统是否为完整(clean).</p>

<table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>不要检验</td>
</tr>
<tr>
<td>1</td>
<td>最早检验(一般根目录会选择)</td>
</tr>
<tr>
<td>2</td>
<td>1级别检验完成之后进行检验</td>
</tr>
</tbody>
</table>

<p>我是默认都是0,不做备份不校验</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.30.14.png" alt="屏幕快照 2018-06-16 10.30.14"/></p>

<h2 id="toc_4">参考</h2>

<p><a href="https://blog.csdn.net/xyang81/article/details/51745683">Linux新增磁盘、分区、格式化和自动挂载</a></p>

<p><a href="https://www.cnblogs.com/qiyebao/p/4484047.html">Linux命令-自动挂载文件/etc/fstab功能详解[转]</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server 日期格式化]]></title>
    <link href="https://blog.qudev.top/15282803325957.html"/>
    <updated>2018-06-06T18:18:52+08:00</updated>
    <id>https://blog.qudev.top/15282803325957.html</id>
    <content type="html"><![CDATA[
<p>Sql Server 中一个非常强大的日期格式化函数<br/>
<span id="more"></span><!-- more --></p>

<pre><code class="language-sql">Select CONVERT(varchar(100), GETDATE(), 0): 05 16 2006 10:57AM 
Select CONVERT(varchar(100), GETDATE(), 1): 05/16/06 
Select CONVERT(varchar(100), GETDATE(), 2): 06.05.16 
Select CONVERT(varchar(100), GETDATE(), 3): 16/05/06 
Select CONVERT(varchar(100), GETDATE(), 4): 16.05.06 
Select CONVERT(varchar(100), GETDATE(), 5): 16-05-06 
Select CONVERT(varchar(100), GETDATE(), 6): 16 05 06 
Select CONVERT(varchar(100), GETDATE(), 7): 05 16, 06 
Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 
Select CONVERT(varchar(100), GETDATE(), 9): 05 16 2006 10:57:46:827AM 
Select CONVERT(varchar(100), GETDATE(), 10): 05-16-06 
Select CONVERT(varchar(100), GETDATE(), 11): 06/05/16 
Select CONVERT(varchar(100), GETDATE(), 12): 060516 
Select CONVERT(varchar(100), GETDATE(), 13): 16 05 2006 10:57:46:937 
Select CONVERT(varchar(100), GETDATE(), 14): 10:57:46:967 
Select CONVERT(varchar(100), GETDATE(), 20): 2006-05-16 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 21): 2006-05-16 10:57:47.157 
Select CONVERT(varchar(100), GETDATE(), 22): 05/16/06 10:57:47 AM 
Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16 
Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 25): 2006-05-16 10:57:47.250 
Select CONVERT(varchar(100), GETDATE(), 100): 05 16 2006 10:57AM 
Select CONVERT(varchar(100), GETDATE(), 101): 05/16/2006 
Select CONVERT(varchar(100), GETDATE(), 102): 2006.05.16 
Select CONVERT(varchar(100), GETDATE(), 103): 16/05/2006 
Select CONVERT(varchar(100), GETDATE(), 104): 16.05.2006 
Select CONVERT(varchar(100), GETDATE(), 105): 16-05-2006 
Select CONVERT(varchar(100), GETDATE(), 106): 16 05 2006 
Select CONVERT(varchar(100), GETDATE(), 107): 05 16, 2006 
Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 109): 05 16 2006 10:57:49:437AM 
Select CONVERT(varchar(100), GETDATE(), 110): 05-16-2006 
Select CONVERT(varchar(100), GETDATE(), 111): 2006/05/16 
Select CONVERT(varchar(100), GETDATE(), 112): 20060516 
Select CONVERT(varchar(100), GETDATE(), 113): 16 05 2006 10:57:49:513 
Select CONVERT(varchar(100), GETDATE(), 114): 10:57:49:547 
Select CONVERT(varchar(100), GETDATE(), 120): 2006-05-16 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 121): 2006-05-16 10:57:49.700 
Select CONVERT(varchar(100), GETDATE(), 126): 2006-05-16T10:57:49.827 
Select CONVERT(varchar(100), GETDATE(), 130): 18 ???? ?????? 1427 10:57:49:907AM 
Select CONVERT(varchar(100), GETDATE(), 131): 18/04/1427 10:57:49:920AM
</code></pre>

<p>常用:</p>

<pre><code class="language-sql">Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 
Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 12): 060516 
Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16
</code></pre>

<p>格式:<br/>
<code>CONVERT(data_type,e­xpression[,style])</code><br/>
说明:<br/>
此样式一般在时间类型<code>(datetime,smalldatetime)</code>与字符串类型<code>(nchar,nvarchar,char,varchar)</code><br/>
相互转换的时候才用到.<br/>
例子:</p>

<pre><code class="language-sql">Select CONVERT(varchar(30),getdate(),101) now
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复下载文件夹变英文]]></title>
    <link href="https://blog.qudev.top/15276843925995.html"/>
    <updated>2018-05-30T20:46:32+08:00</updated>
    <id>https://blog.qudev.top/15276843925995.html</id>
    <content type="html"><![CDATA[
<p>下载文件夹变成了 Downloads，在终端中运行<code>touch ~/Downloads/.localized</code>，重启 Finder （按住 ⌥ 在 dock 的 Finder 上右键）修好了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手机连接电脑的时候提示adb server version (31) doesn't match this client (39)的解决方案]]></title>
    <link href="https://blog.qudev.top/15273352175202.html"/>
    <updated>2018-05-26T19:46:57+08:00</updated>
    <id>https://blog.qudev.top/15273352175202.html</id>
    <content type="html"><![CDATA[
<p>在cmd中输入<code>db nodaemon server -a</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu双网卡配置]]></title>
    <link href="https://blog.qudev.top/15247502619814.html"/>
    <updated>2018-04-26T21:44:21+08:00</updated>
    <id>https://blog.qudev.top/15247502619814.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Ubuntu 17.10双网卡配置</h2>

<p>Ubuntu网络配置多年来一直在用NetworkManager,ifupdown等工具. 17.10引入netplan作为在Ubuntu中配置接口的标准声明性YAML语法<br/>
<span id="more"></span><!-- more --><br/>
Ubuntu 17.10版本修改网络固定IP的方法跟其他版本不一样 不需要修改<code>/etc/network/interfaces</code>文件,而是通过在<code>/etc/netplan/</code>下创建一个自定义YAML配置文件来实现</p>

<h3 id="toc_1">创建一个YAML文件</h3>

<pre><code class="language-bash">sudo vim /etc/netplan/01-netcfg.yaml
</code></pre>

<p>以我的配置为例,我的第二个网卡名称是<code>enp0s8</code>,设置成固定IP方便宿主机SSH远程</p>

<p>YAML内容:</p>

<pre><code class="language-text"># This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      dhcp4: no
      addresses: [192.168.56.2/24]
</code></pre>

<p>确认配置并重启</p>

<pre><code class="language-bash">sudo netplan apply
sudo init 6 
</code></pre>

<h2 id="toc_2">Ubuntu 17.10以下双网卡配置</h2>

<h3 id="toc_3">修改Ubuntu的网络配置文件</h3>

<pre><code class="language-bash">sudo vim /etc/network/interfaces
</code></pre>

<p>配置如下</p>

<pre><code class="language-bash"># The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp

#the second eth1
auto eth1
iface eth1 inet static
address 192.168.56.2
netmask 255.255.255.0
</code></pre>

<ul>
<li>eth0为NAT模式的网卡,eth1为Host-only的网卡</li>
<li>主机和虚拟机通信用192.168.56.*这个网段</li>
</ul>

<p>重启虚拟机</p>

<h2 id="toc_4">参考</h2>

<p><a href="https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/">CONFIGURING STATIC IP ADDRESSES ON UBUNTU 17.10 SERVERS</a></p>

<p><a href="https://wiki.ubuntu.com/Netplan">NetPlan</a></p>

<p><a href="http://www.linuxidc.com/Linux/2017-10/148112.htm">Ubuntu17.10新特性</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macOS U盘安装盘制作]]></title>
    <link href="https://blog.qudev.top/15247502067836.html"/>
    <updated>2018-04-26T21:43:26+08:00</updated>
    <id>https://blog.qudev.top/15247502067836.html</id>
    <content type="html"><![CDATA[
<ol>
<li>将 U 盘格式化成 APFS 格式并重命名为 macOS</li>
<li>制作 macOS 安装盘
<span id="more"></span><!-- more -->
<code>
sudo /Applications/&#39;Install macOS Catalina.app&#39;/Contents/Resources/createinstallmedia --volume /Volumes/macOS
</code></li>
</ol>

<p>如果出现权限不够</p>

<pre><code class="language-text">sudo chmod +x /Applications/&#39;Install macOS Catalina.app&#39;/Contents/Resources/createinstallmedia
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS安装TCP-BBR]]></title>
    <link href="https://blog.qudev.top/15247501426506.html"/>
    <updated>2018-04-26T21:42:22+08:00</updated>
    <id>https://blog.qudev.top/15247501426506.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">安装步骤</h2>

<p>使用root用户登录,运行以下命令:<br/>
<span id="more"></span><!-- more --></p>

<pre><code class="language-bash">wget -N --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh
</code></pre>

<p>安装完成后,脚本会提示需要重启 VPS,输入 y 并回车后重启</p>

<h2 id="toc_1">验证BBR是否安装成功</h2>

<p>重启完成后,进入 VPS,验证一下是否成功安装最新内核并开启 TCP BBR,输入以下命令:</p>

<pre><code class="language-bash">uname -r
# 查看内核版本,含有 4.9.0 就表示 OK 了
# ————————————
sysctl net.ipv4.tcp_available_congestion_control
# 返回值一般为:
# net.ipv4.tcp_available_congestion_control = bbr cubic reno
# ————————————
sysctl net.ipv4.tcp_congestion_control
# 返回值一般为:
# net.ipv4.tcp_congestion_control = bbr
# ————————————
sysctl net.core.default_qdisc
# 返回值一般为:
# net.core.default_qdisc = fq
# ————————————
lsmod | grep bbr
# 返回值有 tcp_bbr 模块即说明bbr已启动
</code></pre>

<h2 id="toc_2">使用方法</h2>

<pre><code class="language-bash"># 启动BBR
bash bbr.sh start
 
# 关闭BBR
bash bbr.sh stop
 
# 查看BBR状态
bash bbr.sh status
</code></pre>

<p><code>注意：关闭BBR需要重启VPS所以脚本会提醒是否立即重启VPS</code></p>

<h2 id="toc_3">升级BBR</h2>

<pre><code class="language-bash">bash bbr.sh
# 重新执行脚本会检测最新内核和当前内核对比版本
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下部署SSR]]></title>
    <link href="https://blog.qudev.top/15247483205460.html"/>
    <updated>2018-04-26T21:12:00+08:00</updated>
    <id>https://blog.qudev.top/15247483205460.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">SSR一键安装包</h2>

<p>下载脚本<br/>
<span id="more"></span><!-- more --></p>

<pre><code class="language-bash">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; bash shadowsocksR.sh
</code></pre>

<p>安装完成后</p>

<p><img src="media/15096861453670/14741174149723.jpg" alt="预览"/></p>

<p>该脚本已经自动将 Shadowsocks 加入开机自启，安装完成 Shadowsocks 就已经启动了。</p>

<h3 id="toc_1">Shadowsocks配置文件</h3>

<pre><code class="language-bash">/etc/shadowsocks.json
</code></pre>

<h3 id="toc_2">其他命令</h3>

<ul>
<li>卸载</li>
</ul>

<pre><code class="language-bash">./shadowsocksR.sh uninstall
</code></pre>

<ul>
<li>启动</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks start
</code></pre>

<ul>
<li>停止</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks stop
</code></pre>

<ul>
<li>重启</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks restart
</code></pre>

<ul>
<li>状态</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks status
</code></pre>

<h3 id="toc_3">为Shadowsocks添加多个端口和密码</h3>

<p>如果你想将 Shadowsocks 账号出售给其他人,或者希望将账号共享给朋友,又不想和他使用同一个密码,那么你就需要给 Shadowsocks添加多个端口和密码,具体还是需要修改 Shadowsocks的配置文件:</p>

<p>默认的单个端口的配置文件如下:</p>

<pre><code class="language-javascript">{
 &quot;server&quot;:&quot;0.0.0.0&quot;,
 &quot;server_ipv6&quot;:&quot;::&quot;,
 &quot;server_port&quot;:8001,
 &quot;local_address&quot;:&quot;127.0.0.1&quot;,
 &quot;local_port&quot;:1080,
 &quot;password&quot;:&quot;123456&quot;,
 &quot;timeout&quot;:120,
 &quot;method&quot;:&quot;chacha20&quot;,
 &quot;protocol&quot;:&quot;origin&quot;,
 &quot;protocol_param&quot;:&quot;&quot;,
 &quot;obfs&quot;:&quot;plain&quot;,
 &quot;obfs_param&quot;:&quot;&quot;,
 &quot;redirect&quot;:&quot;&quot;,
 &quot;dns_ipv6&quot;:false,
 &quot;fast_open&quot;:false,
 &quot;workers&quot;:1
}
</code></pre>

<p>你需要将其中的<code>server_port</code>和<code>password</code>删掉,并且添加<code>port_password</code>的字段:</p>

<pre><code class="language-javascript">    &quot;port_password&quot;: {
        &quot;8001&quot;: {
            &quot;protocol&quot;: &quot;auth_sha1_v2_compatible&quot;,
            &quot;password&quot;: &quot;12345&quot;,
            &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;,
            &quot;obfs_param&quot;: &quot;&quot;
        },
        &quot;8002&quot;:&quot;password2&quot;,
        &quot;8003&quot;:&quot;password3&quot;
    },
</code></pre>

<p>修改好之后，重启 Shadowsocks</p>

<p>Shadowsocks 算是安装好了，不过速度很不理想，我们可以使用 ServerSpeeder 对它进行加速。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用正则表达式]]></title>
    <link href="https://blog.qudev.top/15247482751395.html"/>
    <updated>2018-04-26T21:11:15+08:00</updated>
    <id>https://blog.qudev.top/15247482751395.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">大于等于的数字</h3>

<p><code>^[\d]+[\.]?[\d]+$|^[0-9]$</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用命令]]></title>
    <link href="https://blog.qudev.top/15247482527226.html"/>
    <updated>2018-04-26T21:10:52+08:00</updated>
    <id>https://blog.qudev.top/15247482527226.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">配置</h2>

<h3 id="toc_1">全局配置</h3>

<span id="more"></span><!-- more -->

<pre><code class="language-bash">git config --global user.name &quot;Qu&quot;
git config --global user.email &quot;EvanQu@outlook.com&quot;
</code></pre>

<h2 id="toc_2">基本</h2>

<h3 id="toc_3">初始化Git仓库</h3>

<pre><code class="language-bash">git init
</code></pre>

<h3 id="toc_4">添加文件</h3>

<pre><code class="language-bash">git add files
git add . 
</code></pre>

<p>. 添加全部文件</p>

<h3 id="toc_5">提交文件</h3>

<pre><code class="language-bash">git commit -m &quot;注释说明&quot;
</code></pre>

<h3 id="toc_6">查看Git当前状态</h3>

<pre><code class="language-bash">git status 
</code></pre>

<h3 id="toc_7">查看文件修改内容</h3>

<pre><code class="language-bash">git diff 
</code></pre>

<h3 id="toc_8">查看提交记录</h3>

<pre><code class="language-bash">git log --pretty=oneline
</code></pre>

<p>--pretty=oneline简化信息</p>

<h3 id="toc_9">返回某个版本</h3>

<pre><code class="language-bash">git reset --hard HEAD^
git reset __hard
</code></pre>

<p>HEAD<sup>上一个版本</sup> HEAD<sup><sup>上上一个版本</sup></sup></p>

<h3 id="toc_10">查看操作命令记录</h3>

<pre><code class="language-bash">git reflog
</code></pre>

<h3 id="toc_11">撤销工作区的修改</h3>

<pre><code class="language-bash">git chekout --
</code></pre>

<h3 id="toc_12">删除文件</h3>

<pre><code class="language-bash">git rm
</code></pre>

<h2 id="toc_13">远程</h2>

<h3 id="toc_14">创建SSH Key</h3>

<pre><code class="language-bash">ssh-keygen -t rsa -C &quot;EvanQu@outlook.com&quot;
</code></pre>

<h3 id="toc_15">查看远程库信息</h3>

<pre><code class="language-bash">git remote -v
</code></pre>

<h3 id="toc_16">添加远程仓库</h3>

<pre><code class="language-bash">git remote add origin
git@github.com:happyququ/learngit.git
</code></pre>

<h3 id="toc_17">第一次推送</h3>

<pre><code class="language-bash">git push -u origin master
</code></pre>

<h3 id="toc_18">推送到远程库</h3>

<pre><code class="language-bash">git push
</code></pre>

<h3 id="toc_19">推送到远程库分支</h3>

<pre><code class="language-bash">git push origin
</code></pre>

<h3 id="toc_20">服务器拉取</h3>

<pre><code class="language-bash">git pull
</code></pre>

<h3 id="toc_21">克隆仓库</h3>

<pre><code class="language-bash">git clone
git@github.com:happyququ/learninggit.git
</code></pre>

<h3 id="toc_22">本地创建与远程库分支对应的分支</h3>

<pre><code class="language-bash">git
checkout -b origin/
</code></pre>

<h3 id="toc_23">本地分支与远程分支关联</h3>

<pre><code class="language-bash">git branch --set-upstream origin/
</code></pre>

<h2 id="toc_24">分支</h2>

<h3 id="toc_25">查看分支</h3>

<pre><code class="language-bash">git branch
</code></pre>

<h3 id="toc_26">创建分支</h3>

<pre><code class="language-bash">git branch
</code></pre>

<h3 id="toc_27">切换分支</h3>

<pre><code class="language-bash">git checkout
</code></pre>

<h3 id="toc_28">创建并切换分支</h3>

<pre><code class="language-bash">git checkout -b
</code></pre>

<h3 id="toc_29">合并某个分支到当前分支</h3>

<pre><code class="language-bash">git merge
</code></pre>

<p>合并就看不出来曾经做过合并</p>

<h3 id="toc_30">删除分支</h3>

<pre><code class="language-bash">git branch -d
</code></pre>

<h3 id="toc_31">强行删除分支</h3>

<pre><code class="language-bash">git branch -D
</code></pre>

<h3 id="toc_32">查看分支合并图</h3>

<pre><code class="language-bash">git -log --graph
</code></pre>

<h3 id="toc_33">合并分支保留分支信息</h3>

<pre><code class="language-bash">git merge --no-ff -m &quot;&quot;
</code></pre>

<p>合并后的历史有分支,能看出来曾经做过合并 ### 隐藏当前工作区</p>

<pre><code class="language-bash">git stash
</code></pre>

<h3 id="toc_34">显示隐藏的工作区</h3>

<pre><code class="language-bash">git stash list
</code></pre>

<h3 id="toc_35">恢复隐藏的工作区</h3>

<pre><code class="language-bash">git stash pop
</code></pre>

<h2 id="toc_36">标签</h2>

<h3 id="toc_37">新建标签</h3>

<pre><code class="language-bash">git tag
</code></pre>

<h3 id="toc_38">指定标签信息</h3>

<pre><code class="language-bash">git tag -a -m &quot;&quot;
</code></pre>

<h3 id="toc_39">查看所有标签</h3>

<pre><code class="language-bash">git tag
</code></pre>

<h3 id="toc_40">推送一个本地标签</h3>

<pre><code class="language-bash">git push origin
</code></pre>

<h3 id="toc_41">推送全部标签</h3>

<pre><code class="language-bash">git push origin --tags
</code></pre>

<h3 id="toc_42">删除本地标签</h3>

<pre><code class="language-bash">git tag -d
</code></pre>

<h3 id="toc_43">删除远程标签</h3>

<pre><code class="language-bash">push origin :refs/tags/
</code></pre>

<h3 id="toc_44">显示颜色</h3>

<pre><code class="language-bash">git config --global color.ui true
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexo 安装和部署]]></title>
    <link href="https://blog.qudev.top/15247480658840.html"/>
    <updated>2018-04-26T21:07:45+08:00</updated>
    <id>https://blog.qudev.top/15247480658840.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">基础安装</h3>

<p>NodeJs 安装</p>

<pre><code class="language-text">sudo apt install NodeJs
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_1">Hexo 安装</h3>

<pre><code class="language-text">sudo npm install hexo-cli -g
</code></pre>

<p>如果出现 <code>sh: 1: cannot create highlight_alias.json: Permission denied</code> 错误,尝试执行 <code>sudo npm config set unsafe-perm true</code>，依然不行按照官方解决方案尝试 <a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions">fixing-npm-permissions</a></p>

<h3 id="toc_2">初始化 Hexo</h3>

<pre><code class="language-text">hexo init blog
sudo npm install
</code></pre>

<h3 id="toc_3">安装 Git 发布插件</h3>

<pre><code class="language-text">sudo npm install hexo-deployer-git --save
</code></pre>

<ul>
<li>在Github或者码云上自己名字的项目,比如我的项目地址: <code>git@github.com:HappyQuQu/happyququ.github.io.git</code></li>
<li>将自己电脑上生成的 SSH pubkey 保存在 GitHub 上</li>
<li>在 Hexo 的 _config.xml 文件里填上自己的项目地址</li>
</ul>

<pre><code class="language-text">deploy:
  type: git
  repo: git@github.com:HappyQuQu/happyququ.github.io.git
</code></pre>

<ul>
<li><p>在项目的根目录，新建名为CNAME的文件，内容为：你的域名，例如我的就是:<code>qudev.top</code></p></li>
<li><p>再到把你的域名指向你的 <code>happyququ.github.io</code>，几分钟过后，就可以看到成功的诞生了。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
