<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qu Blog]]></title>
  <link href="http://blog.qudev.top/atom.xml" rel="self"/>
  <link href="http://blog.qudev.top/"/>
  <updated>2018-05-26T19:47:06+08:00</updated>
  <id>http://blog.qudev.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[Android手机连接电脑的时候提示adb server version (31) doesn't match this client (39)的解决方案]]></title>
    <link href="http://blog.qudev.top/15273352175202.html"/>
    <updated>2018-05-26T19:46:57+08:00</updated>
    <id>http://blog.qudev.top/15273352175202.html</id>
    <content type="html"><![CDATA[
<p>在cmd中输入<code>db nodaemon server -a</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu双网卡配置]]></title>
    <link href="http://blog.qudev.top/15247502619814.html"/>
    <updated>2018-04-26T21:44:21+08:00</updated>
    <id>http://blog.qudev.top/15247502619814.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Ubuntu 17.10双网卡配置</h2>

<p>Ubuntu网络配置多年来一直在用NetworkManager,ifupdown等工具. 17.10引入netplan作为在Ubuntu中配置接口的标准声明性YAML语法</p>

<p>Ubuntu 17.10版本修改网络固定IP的方法跟其他版本不一样 不需要修改<code>/etc/network/interfaces</code>文件,而是通过在<code>/etc/netplan/</code>下创建一个自定义YAML配置文件来实现</p>

<h3 id="toc_1">创建一个YAML文件</h3>

<pre><code class="language-bash">sudo vim /etc/netplan/01-netcfg.yaml
</code></pre>

<p>以我的配置为例,我的第二个网卡名称是<code>enp0s8</code>,设置成固定IP方便宿主机SSH远程</p>

<p>YAML内容:</p>

<pre><code># This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      dhcp4: no
      addresses: [192.168.56.2/24]
</code></pre>

<p>确认配置并重启</p>

<pre><code class="language-bash">sudo netplan apply
sudo init 6 
</code></pre>

<h2 id="toc_2">Ubuntu 17.10以下双网卡配置</h2>

<h3 id="toc_3">修改Ubuntu的网络配置文件</h3>

<pre><code class="language-bash">sudo vim /etc/network/interfaces
</code></pre>

<p>配置如下</p>

<pre><code class="language-bash"># The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp

#the second eth1
auto eth1
iface eth1 inet static
address 192.168.56.2
netmask 255.255.255.0
</code></pre>

<ul>
<li>eth0为NAT模式的网卡,eth1为Host-only的网卡</li>
<li>主机和虚拟机通信用192.168.56.*这个网段</li>
</ul>

<p>重启虚拟机</p>

<h2 id="toc_4">参考</h2>

<p><a href="https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/">CONFIGURING STATIC IP ADDRESSES ON UBUNTU 17.10 SERVERS</a></p>

<p><a href="https://wiki.ubuntu.com/Netplan">NetPlan</a></p>

<p><a href="http://www.linuxidc.com/Linux/2017-10/148112.htm">Ubuntu17.10新特性</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macOS U盘安装盘制作]]></title>
    <link href="http://blog.qudev.top/15247502067836.html"/>
    <updated>2018-04-26T21:43:26+08:00</updated>
    <id>http://blog.qudev.top/15247502067836.html</id>
    <content type="html"><![CDATA[
<ol>
<li>将系统安装文件重命名为Install macOS.app</li>
<li>将U盘格式化成OSX拓展格式并重命名为macOS</li>
<li>制作macOS安装盘</li>
</ol>

<pre><code class="language-bash">sudo /Applications/&#39;Install macOS High Sierra.app&#39;/Contents/Resources/createinstallmedia --volume /Volumes/&#39;macOS&#39; --applicationpath /Applications/&#39;Install macOS High Sierra.app&#39;
</code></pre>

<p>PS:</p>

<p>如果出现权限不够</p>

<pre><code class="language-bash">sudo chmod +x /Applications/&#39;Install macOS.app&#39;/Contents/Resources/createinstallmedia
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS安装TCP-BBR]]></title>
    <link href="http://blog.qudev.top/15247501426506.html"/>
    <updated>2018-04-26T21:42:22+08:00</updated>
    <id>http://blog.qudev.top/15247501426506.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">安装步骤</h2>

<p>使用root用户登录,运行以下命令:</p>

<pre><code class="language-bash">wget -N --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh
</code></pre>

<p>安装完成后,脚本会提示需要重启 VPS,输入 y 并回车后重启</p>

<h2 id="toc_1">验证BBR是否安装成功</h2>

<p>重启完成后,进入 VPS,验证一下是否成功安装最新内核并开启 TCP BBR,输入以下命令:</p>

<pre><code class="language-bash">uname -r
# 查看内核版本,含有 4.9.0 就表示 OK 了
# ————————————
sysctl net.ipv4.tcp_available_congestion_control
# 返回值一般为:
# net.ipv4.tcp_available_congestion_control = bbr cubic reno
# ————————————
sysctl net.ipv4.tcp_congestion_control
# 返回值一般为:
# net.ipv4.tcp_congestion_control = bbr
# ————————————
sysctl net.core.default_qdisc
# 返回值一般为:
# net.core.default_qdisc = fq
# ————————————
lsmod | grep bbr
# 返回值有 tcp_bbr 模块即说明bbr已启动
</code></pre>

<h2 id="toc_2">使用方法</h2>

<pre><code class="language-bash"># 启动BBR
bash bbr.sh start
 
# 关闭BBR
bash bbr.sh stop
 
# 查看BBR状态
bash bbr.sh status
</code></pre>

<p><code>注意：关闭BBR需要重启VPS所以脚本会提醒是否立即重启VPS</code></p>

<h2 id="toc_3">升级BBR</h2>

<pre><code class="language-bash">bash bbr.sh
# 重新执行脚本会检测最新内核和当前内核对比版本
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下部署SSR]]></title>
    <link href="http://blog.qudev.top/15247483205460.html"/>
    <updated>2018-04-26T21:12:00+08:00</updated>
    <id>http://blog.qudev.top/15247483205460.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">SSR一键安装包</h2>

<p>下载脚本</p>

<pre><code class="language-bash">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; bash shadowsocksR.sh
</code></pre>

<p>安装完成后</p>

<p><img src="media/15096861453670/14741174149723.jpg" alt="预览"/></p>

<p>该脚本已经自动将 Shadowsocks 加入开机自启，安装完成 Shadowsocks 就已经启动了。</p>

<h3 id="toc_1">Shadowsocks配置文件</h3>

<pre><code class="language-bash">/etc/shadowsocks.json
</code></pre>

<h3 id="toc_2">其他命令</h3>

<ul>
<li>卸载</li>
</ul>

<pre><code class="language-bash">./shadowsocksR.sh uninstall
</code></pre>

<ul>
<li>启动</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks start
</code></pre>

<ul>
<li>停止</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks stop
</code></pre>

<ul>
<li>重启</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks restart
</code></pre>

<ul>
<li>状态</li>
</ul>

<pre><code class="language-bash">/etc/init.d/shadowsocks status
</code></pre>

<h3 id="toc_3">为Shadowsocks添加多个端口和密码</h3>

<p>如果你想将 Shadowsocks 账号出售给其他人,或者希望将账号共享给朋友,又不想和他使用同一个密码,那么你就需要给 Shadowsocks添加多个端口和密码,具体还是需要修改 Shadowsocks的配置文件:</p>

<p>默认的单个端口的配置文件如下:</p>

<pre><code class="language-json">{
 &quot;server&quot;:&quot;0.0.0.0&quot;,
 &quot;server_ipv6&quot;:&quot;::&quot;,
 &quot;server_port&quot;:8001,
 &quot;local_address&quot;:&quot;127.0.0.1&quot;,
 &quot;local_port&quot;:1080,
 &quot;password&quot;:&quot;123456&quot;,
 &quot;timeout&quot;:120,
 &quot;method&quot;:&quot;chacha20&quot;,
 &quot;protocol&quot;:&quot;origin&quot;,
 &quot;protocol_param&quot;:&quot;&quot;,
 &quot;obfs&quot;:&quot;plain&quot;,
 &quot;obfs_param&quot;:&quot;&quot;,
 &quot;redirect&quot;:&quot;&quot;,
 &quot;dns_ipv6&quot;:false,
 &quot;fast_open&quot;:false,
 &quot;workers&quot;:1
}
</code></pre>

<p>你需要将其中的<code>server_port</code>和<code>password</code>删掉,并且添加<code>port_password</code>的字段:</p>

<pre><code class="language-json">    &quot;port_password&quot;: {
        &quot;8001&quot;: {
            &quot;protocol&quot;: &quot;auth_sha1_v2_compatible&quot;,
            &quot;password&quot;: &quot;12345&quot;,
            &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;,
            &quot;obfs_param&quot;: &quot;&quot;
        },
        &quot;8002&quot;:&quot;password2&quot;,
        &quot;8003&quot;:&quot;password3&quot;
    },
</code></pre>

<p>修改好之后，重启 Shadowsocks</p>

<p>Shadowsocks 算是安装好了，不过速度很不理想，我们可以使用 ServerSpeeder 对它进行加速。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用正则表达式]]></title>
    <link href="http://blog.qudev.top/15247482751395.html"/>
    <updated>2018-04-26T21:11:15+08:00</updated>
    <id>http://blog.qudev.top/15247482751395.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">大于等于的数字</h3>

<p><code>^[\d]+[\.]?[\d]+$|^[0-9]$</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用命令]]></title>
    <link href="http://blog.qudev.top/15247482527226.html"/>
    <updated>2018-04-26T21:10:52+08:00</updated>
    <id>http://blog.qudev.top/15247482527226.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">配置</h2>

<h3 id="toc_1">全局配置</h3>

<pre><code class="language-bash">git config --global user.name &quot;Qu&quot;
git config --global user.email &quot;EvanQu@outlook.com&quot;
</code></pre>

<h2 id="toc_2">基本</h2>

<h3 id="toc_3">初始化Git仓库</h3>

<pre><code class="language-bash">git init
</code></pre>

<h3 id="toc_4">添加文件</h3>

<pre><code class="language-bash">git add files
git add . 
</code></pre>

<p>. 添加全部文件</p>

<h3 id="toc_5">提交文件</h3>

<pre><code class="language-bash">git commit -m &quot;注释说明&quot;
</code></pre>

<h3 id="toc_6">查看Git当前状态</h3>

<pre><code class="language-bash">git status 
</code></pre>

<h3 id="toc_7">查看文件修改内容</h3>

<pre><code class="language-bash">git diff 
</code></pre>

<h3 id="toc_8">查看提交记录</h3>

<pre><code class="language-bash">git log --pretty=oneline
</code></pre>

<p>--pretty=oneline简化信息</p>

<h3 id="toc_9">返回某个版本</h3>

<pre><code class="language-bash">git reset --hard HEAD^
git reset __hard
</code></pre>

<p>HEAD<sup>上一个版本</sup> HEAD<sup><sup>上上一个版本</sup></sup></p>

<h3 id="toc_10">查看操作命令记录</h3>

<pre><code class="language-bash">git reflog
</code></pre>

<h3 id="toc_11">撤销工作区的修改</h3>

<pre><code class="language-bash">git chekout --
</code></pre>

<h3 id="toc_12">删除文件</h3>

<pre><code class="language-bash">git rm
</code></pre>

<h2 id="toc_13">远程</h2>

<h3 id="toc_14">创建SSH Key</h3>

<pre><code class="language-bash">ssh-keygen -t rsa -C &quot;EvanQu@outlook.com&quot;
</code></pre>

<h3 id="toc_15">查看远程库信息</h3>

<pre><code class="language-bash">git remote -v
</code></pre>

<h3 id="toc_16">添加远程仓库</h3>

<pre><code class="language-bash">git remote add origin
git@github.com:happyququ/learngit.git
</code></pre>

<h3 id="toc_17">第一次推送</h3>

<pre><code class="language-bash">git push -u origin master
</code></pre>

<h3 id="toc_18">推送到远程库</h3>

<pre><code class="language-bash">git push
</code></pre>

<h3 id="toc_19">推送到远程库分支</h3>

<pre><code class="language-bash">git push origin
</code></pre>

<h3 id="toc_20">服务器拉取</h3>

<pre><code class="language-bash">git pull
</code></pre>

<h3 id="toc_21">克隆仓库</h3>

<pre><code class="language-bash">git clone
git@github.com:happyququ/learninggit.git
</code></pre>

<h3 id="toc_22">本地创建与远程库分支对应的分支</h3>

<pre><code class="language-bash">git
checkout -b origin/
</code></pre>

<h3 id="toc_23">本地分支与远程分支关联</h3>

<pre><code class="language-bash">git branch --set-upstream origin/
</code></pre>

<h2 id="toc_24">分支</h2>

<h3 id="toc_25">查看分支</h3>

<pre><code class="language-bash">git branch
</code></pre>

<h3 id="toc_26">创建分支</h3>

<pre><code class="language-bash">git branch
</code></pre>

<h3 id="toc_27">切换分支</h3>

<pre><code class="language-bash">git checkout
</code></pre>

<h3 id="toc_28">创建并切换分支</h3>

<pre><code class="language-bash">git checkout -b
</code></pre>

<h3 id="toc_29">合并某个分支到当前分支</h3>

<pre><code class="language-bash">git merge
</code></pre>

<p>合并就看不出来曾经做过合并</p>

<h3 id="toc_30">删除分支</h3>

<pre><code class="language-bash">git branch -d
</code></pre>

<h3 id="toc_31">强行删除分支</h3>

<pre><code class="language-bash">git branch -D
</code></pre>

<h3 id="toc_32">查看分支合并图</h3>

<pre><code class="language-bash">git -log --graph
</code></pre>

<h3 id="toc_33">合并分支保留分支信息</h3>

<pre><code class="language-bash">git merge --no-ff -m &quot;&quot;
</code></pre>

<p>合并后的历史有分支,能看出来曾经做过合并 ### 隐藏当前工作区</p>

<pre><code class="language-bash">git stash
</code></pre>

<h3 id="toc_34">显示隐藏的工作区</h3>

<pre><code class="language-bash">git stash list
</code></pre>

<h3 id="toc_35">恢复隐藏的工作区</h3>

<pre><code class="language-bash">git stash pop
</code></pre>

<h2 id="toc_36">标签</h2>

<h3 id="toc_37">新建标签</h3>

<pre><code class="language-bash">git tag
</code></pre>

<h3 id="toc_38">指定标签信息</h3>

<pre><code class="language-bash">git tag -a -m &quot;&quot;
</code></pre>

<h3 id="toc_39">查看所有标签</h3>

<pre><code class="language-bash">git tag
</code></pre>

<h3 id="toc_40">推送一个本地标签</h3>

<pre><code class="language-bash">git push origin
</code></pre>

<h3 id="toc_41">推送全部标签</h3>

<pre><code class="language-bash">git push origin --tags
</code></pre>

<h3 id="toc_42">删除本地标签</h3>

<pre><code class="language-bash">git tag -d
</code></pre>

<h3 id="toc_43">删除远程标签</h3>

<pre><code class="language-bash">push origin :refs/tags/
</code></pre>

<h3 id="toc_44">显示颜色</h3>

<pre><code class="language-bash">git config --global color.ui true
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexo安装和部署]]></title>
    <link href="http://blog.qudev.top/15247480658840.html"/>
    <updated>2018-04-26T21:07:45+08:00</updated>
    <id>http://blog.qudev.top/15247480658840.html</id>
    <content type="html"><![CDATA[
<ul>
<li>基础安装
NodeJs安装</li>
</ul>

<pre><code class="language-bash">sudo apt install NodeJs
</code></pre>

<ul>
<li>Hexo安装</li>
</ul>

<pre><code class="language-bash">sudo npm install hexo-cli -g
</code></pre>

<p>如果出现<code>sh: 1: cannot create highlight_alias.json: Permission denied</code>错误,尝试执行<code>sudo npm config set unsafe-perm true</code>，依然不行按照官方解决方案尝试<a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions">fixing-npm-permissions</a></p>

<ul>
<li>初始化Hexo</li>
</ul>

<pre><code class="language-bash">hexo init blog
sudo npm install
</code></pre>

<ul>
<li>安装Git发布插件</li>
</ul>

<pre><code class="language-bash">sudo npm install hexo-deployer-git --save
</code></pre>

<ul>
<li>在Github或者码云上自己名字的项目,比如我的项目地址:<code>git@github.com:HappyQuQu/happyququ.github.io.git</code></li>
<li>将自己电脑上生成的SSH pubkey保存在GitHub上</li>
<li>在Hexo的_config.xml文件里填上自己的项目地址</li>
</ul>

<pre><code>deploy:
  type: git
  repo: git@github.com:HappyQuQu/happyququ.github.io.git
</code></pre>

<ul>
<li><p>在项目的根目录，新建名为CNAME的文件，内容为：你的域名，例如我的就是:<code>qudev.top</code></p></li>
<li><p>再到把你的域名指向你的<code>happyququ.github.io</code>，几分钟过后，就可以看到成功的诞生了。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
