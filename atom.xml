<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qu Blog]]></title>
  <link href="http://blog.qudev.top/atom.xml" rel="self"/>
  <link href="http://blog.qudev.top/"/>
  <updated>2022-10-02T16:02:23+08:00</updated>
  <id>http://blog.qudev.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[查看是否双通道]]></title>
    <link href="http://blog.qudev.top/16646973318866.html"/>
    <updated>2022-10-02T15:55:31+08:00</updated>
    <id>http://blog.qudev.top/16646973318866.html</id>
    <content type="html"><![CDATA[
<p>相同 <code>Channel</code> 就是双通道了</p>

<h3 id="toc_0">方法 1</h3>

<p>显示内存大小和是否双通道</p>

<pre><code class="language-bash"> dmidecode -t 17 | awk &#39;BEGIN { FS=&quot;:&quot;; OFS=&quot;\t&quot; } /Size|Channel/ { line = (line ? line OFS : &quot;&quot;) $2 } /^$/ { print line; line=&quot;RAM&quot; }&#39; | grep -iv &#39;no&#39;
</code></pre>

<h3 id="toc_1">方法 2</h3>

<p>只是显示是否双通道</p>

<pre><code class="language-bash">dmidecode -t memory | grep Channel
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 合盖不休眠]]></title>
    <link href="http://blog.qudev.top/16646972721295.html"/>
    <updated>2022-10-02T15:54:32+08:00</updated>
    <id>http://blog.qudev.top/16646972721295.html</id>
    <content type="html"><![CDATA[
<p>编辑下列文件：</p>

<pre><code class="language-shell">vim /etc/systemd/logind.conf
</code></pre>

<p><code>#HandlePowerKey</code> 按下电源键后的行为，默认 <code>power off</code><br/>
<code>#HandleSleepKey</code> 按下挂起键后的行为，默认 <code>suspend</code><br/>
<code>#HandleHibernateKey</code> 按下休眠键后的行为，默认 <code>hibernate</code><br/>
<code>#HandleLidSwitch</code> 合上笔记本盖后的行为，默认 <code>suspend</code>（改为 <code>ignore</code> ；即合盖不休眠）在原文件中，还要去掉前面的<code>#</code></p>

<p>然后将其中的：<br/>
<code>#HandleLidSwitch=suspend</code><br/>
改成下面，记得去掉“#”号：<br/>
<code>HandleLidSwitch=ignore</code></p>

<p>最后重启服务</p>

<pre><code class="language-shell">service systemd-logind restart
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZFS 设置 ARC 大小]]></title>
    <link href="http://blog.qudev.top/16646972141823.html"/>
    <updated>2022-10-02T15:53:34+08:00</updated>
    <id>http://blog.qudev.top/16646972141823.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">永久</h2>

<ul>
<li>记得关掉虚拟机</li>
</ul>

<pre><code class="language-shell">nano /etc/modprobe.d/zfs.conf
</code></pre>

<pre><code class="language-shell"># Maximum ZFS ARC : 4 GB
options zfs zfs_arc_max=4294967296
# Minimum ZFS ARC : 2 GB
options zfs zfs_arc_mix=2147483648
</code></pre>

<pre><code class="language-shell">reboot
</code></pre>

<h2 id="toc_1">临时</h2>

<ul>
<li>重启后失效</li>
</ul>

<pre><code class="language-shell">echo 2147483648 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_min
echo 4294967296 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_max
</code></pre>

<h2 id="toc_2">更新 initramfs</h2>

<pre><code class="language-shell">update-initramfs -u
</code></pre>

<h2 id="toc_3">常用内存大小</h2>

<h3 id="toc_4">32G</h3>

<pre><code class="language-bash">34359738368
</code></pre>

<h3 id="toc_5">16G</h3>

<pre><code class="language-bash">17179869184
</code></pre>

<h3 id="toc_6">8G</h3>

<pre><code class="language-bash">8589934592
</code></pre>

<h3 id="toc_7">4G</h3>

<pre><code class="language-bash">4294967296
</code></pre>

<h3 id="toc_8">2G</h3>

<pre><code class="language-bash">2147483648
</code></pre>

<h3 id="toc_9">1G</h3>

<pre><code class="language-bash">1073741824
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 创建服务]]></title>
    <link href="http://blog.qudev.top/16646971948324.html"/>
    <updated>2022-10-02T15:53:14+08:00</updated>
    <id>http://blog.qudev.top/16646971948324.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">服务路径</h4>

<pre><code class="language-shell">/lib/systemd/system
</code></pre>

<p>或者</p>

<pre><code class="language-shell">/usr/lib/systemd/system/
</code></pre>

<h3 id="toc_1">创建服务</h3>

<p>在 <code>/lib/systemd/system</code> 路径下新建 <code>testservice.service</code> 文件内容如下</p>

<pre><code class="language-shell">nano /lib/systemd/system/testservice.service

</code></pre>

<pre><code class="language-ini">[Unit]
Description=Clash Service
After=network.target

[Service]
Type=simple
User=nobody
Restart=on-failure
RestartSec=5s
ExecStart=/root/app/clash/clash -d /root/app/clash/

[Install]
WantedBy=multi-user.target
</code></pre>

<h3 id="toc_2">常用命令</h3>

<pre><code class="language-shell">#重新加载服务列表
systemctl daemon-reload 
</code></pre>

<pre><code class="language-shell">#设为开机启动
systemctl enable testservice.service
</code></pre>

<pre><code class="language-shell">#启动服务
systemctl start testservice.service
</code></pre>

<pre><code class="language-shell">#重启服务
systemctl restart testservice.service
</code></pre>

<h3 id="toc_3">查看服务日志</h3>

<pre><code class="language-shell"># --no-pager 
journalctl -u service-name.service --no-pager
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计命令行使用占比]]></title>
    <link href="http://blog.qudev.top/16646971021104.html"/>
    <updated>2022-10-02T15:51:42+08:00</updated>
    <id>http://blog.qudev.top/16646971021104.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">history | awk &#39;{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] &quot; &quot; CMD[a]/count*100 &quot;% &quot; a;}&#39; | grep -v &quot;./&quot; | column -c3 -s &quot; &quot; -t | sort -nr | nl | head -n10

</code></pre>

<h2 id="toc_0">PS</h2>

<p>来自某位 V2EXer</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建 Mac 的 TimeMachine 备份服务器]]></title>
    <link href="http://blog.qudev.top/16646970321576.html"/>
    <updated>2022-10-02T15:50:32+08:00</updated>
    <id>http://blog.qudev.top/16646970321576.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">安装 Netatalk</h3>

<pre><code class="language-bash">apt install netatalk avahi-daemon
</code></pre>

<h3 id="toc_1">配置 Netatalk</h3>

<pre><code class="language-bash"> nano /etc/netatalk/afp.conf
</code></pre>

<pre><code class="language-config">[Time Machine]
path = /tmbackup
valid users = tm
time machine = yes
</code></pre>

<h3 id="toc_2">创建用户和备份目录</h3>

<pre><code class="language-bash"># 创建用户
useradd tm

# 修改用户密码
passwd tm

# 创建备份目录
mkdir -p /tmbackup

# 修改目录权限
chown -R tm:tm /tmbackup

# 重启 netatalk 服务
service netatalk restart
 ```

### Mac 端配置

 打开`系统偏好设置`中的`时间机器`,选择这个磁盘

### 参考

[搭建 Mac 的 TimeMachine 备份服务器](https://blog.1seo.top/wiki/Mac/%E6%90%AD%E5%BB%BAMac%E7%9A%84TimeMachine%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PVE 删除 local-lvm]]></title>
    <link href="http://blog.qudev.top/16646969668998.html"/>
    <updated>2022-10-02T15:49:26+08:00</updated>
    <id>http://blog.qudev.top/16646969668998.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">步骤</h3>

<ul>
<li>备份虚拟机（如果是全新安装，则省略这一步）</li>
<li>删除虚拟机（如果是全新安装，则省略这一步）</li>
<li>删除 <code>local-lvm</code></li>
</ul>

<pre><code class="language-bash">lvremove pve/data
</code></pre>

<ul>
<li>扩展Loacal，把删除的Local-LVM控件扩展给Local</li>
</ul>

<pre><code class="language-bash">lvextend -l +100%FREE -r pve/root
</code></pre>

<ul>
<li>PVE页面删除Local-LVM储存</li>
<li>编辑Local，内容全部打上勾</li>
<li>恢复虚拟机（如果是全新安装，则省略这一步）</li>
</ul>

<h3 id="toc_1">参考</h3>

<p><a href="https://www.lxtx.tech/index.php/archives/55/">pve删除local-lvm，并把控件合并到local的操作</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PVE 开启 IPv6 公网]]></title>
    <link href="http://blog.qudev.top/16646969274194.html"/>
    <updated>2022-10-02T15:48:47+08:00</updated>
    <id>http://blog.qudev.top/16646969274194.html</id>
    <content type="html"><![CDATA[
<p>查看内核也已经开启 ipv6 自动配置</p>

<pre><code class="language-bash">cat /proc/sys/net/ipv6/conf/vmbr0/accept_ra
1
</code></pre>

<h3 id="toc_0">临时开启</h3>

<p>重启后失效</p>

<pre><code class="language-bash">echo /proc/sys/net/ipv6/conf/vmbr0/accept_ra &gt; 2
</code></pre>

<h3 id="toc_1">永久开启</h3>

<p>修改<code>/etc/sysctl.conf</code>文件里面的内容在最后添加</p>

<pre><code class="language-config">net.ipv6.conf.vmbr0.accept_ra=2
</code></pre>

<h3 id="toc_2">参考</h3>

<p><a href="https://www.haiyun.me/archives/1416.html#comment-688">Proxmox 网桥通过 SLAAC 配置公网 ipv6 地址</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXC 安装 Docker]]></title>
    <link href="http://blog.qudev.top/16646969254483.html"/>
    <updated>2022-10-02T15:48:45+08:00</updated>
    <id>http://blog.qudev.top/16646969254483.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">前提</h3>

<p>有些软件只支持 <code>Docker</code> 或者部署起来非常不方便.而且又不想影响 <code>PVE</code> 宿主机,所以只能 <code>LXC</code> 里面套个 <code>Docker</code></p>

<h3 id="toc_1">准备</h3>

<ul>
<li>新建 <code>LXC</code></li>
<li>勾选<code>无特权容器</code></li>
<li>不要在建立后自动启动</li>
<li>选项里面勾选<code>按键</code>和<code>嵌套</code></li>
</ul>

<h3 id="toc_2">安裝 sudo</h3>

<pre><code class="language-shell">apt update
apt install sudo
</code></pre>

<h3 id="toc_3">新增使用者</h3>

<p>自己随便起</p>

<pre><code class="language-shell">adduser qu
</code></pre>

<p>把刚创建的使用者加入 <code>sudo</code> 群组</p>

<pre><code class="language-shell">usermod -aG sudo qu
</code></pre>

<h4 id="toc_4"><code>sudo</code> 不需输入密码（可选）</h4>

<p>编辑 <code>sudo</code></p>

<pre><code class="language-text">visudo
</code></pre>

<p>更改为不需输入密码</p>

<pre><code class="language-conf"># Allow members of group sudo to execute any command
%sudo  ALL=(ALL:ALL) NOPASSWD:ALL
</code></pre>

<p>切换使用者</p>

<pre><code class="language-shell">su - qu
</code></pre>

<p>测试 <code>sudo</code></p>

<pre><code class="language-shell">whoami
</code></pre>

<p>输出：<code>qu</code> 的话就代表成功了！</p>

<h3 id="toc_5">安装 <code>Docker</code></h3>

<p>使用刚刚创建的使用者执行以下步骤<br/>
移除旧版本</p>

<pre><code class="language-shell">sudo apt-get remove docker docker-engine docker.io containerd runc

</code></pre>

<p>设置仓库</p>

<pre><code class="language-shell">sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

</code></pre>

<pre><code class="language-shell">sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

</code></pre>

<pre><code class="language-shell">echo \
  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null

</code></pre>

<p>安装 <code>Docker</code> 引擎</p>

<pre><code class="language-shell">sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre>

<h4 id="toc_6">将使用者加入 <code>docker</code> 群组（可选）</h4>

<p>可以不使用 <code>sudo</code> 直接执行 <code>docker</code></p>

<pre><code class="language-shell">sudo usermod -aG docker $USER
sudo reboot
</code></pre>

<p>测试</p>

<pre><code class="language-shell">docker version
</code></pre>

<p>有跑出版本信息就成功了</p>

<h3 id="toc_7">安装 <code>Docker Compose</code></h3>

<p>链接 <a href="https://github.com/docker/compose/releases">Docker Compose</a></p>

<p>复制到执行目录下</p>

<pre><code class="language-shell">cp ~/docker-compose* /usr/bin/docker-compose
</code></pre>

<p>权限可执行</p>

<pre><code class="language-shell">sudo chmod +x /usr/bin/docker-compose
</code></pre>

<p>测试</p>

<pre><code class="language-shell">docker-compose --version
</code></pre>

<p>有跑出版本信息就成功了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PVE 7 LXC 权限调用]]></title>
    <link href="http://blog.qudev.top/16646966780408.html"/>
    <updated>2022-10-02T15:44:38+08:00</updated>
    <id>http://blog.qudev.top/16646966780408.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">核显调用</h3>

<p>配置 CT 渲染设备节点，开启硬件加速：  默认情况下 LXC 并不会自动映射 dev 目录下的设备节点文件。所以我们首先需要修改配置文件，使 LXC 自动映射 dev 下的设备文件。<br/>
首先我们需要在 host(pve) shell 中确认一下 host 设备文件的情况：</p>

<pre><code class="language-shell">ls -l /dev/dri/
total 0
drwxr-xr-x 2 root root         80 Apr 20 12:24 by-path
crw-rw---- 1 root video  226,   0 Apr 20 12:24 card0
crw-rw---- 1 root render 226, 128 Apr 20 12:24 renderD128
</code></pre>

<p><code>video  id: 226,   0</code><br/>
<code>render id:226, 128</code><br/>
修改 LXC 的配置文件，路径为<code>/etc/pve/lxc/{你的 CT ID}.conf</code>.</p>

<p>例如我的 CT ID 是 231，所以对应的文件是<code>/etc/pve/lxc/231.conf</code><br/>
使用编辑器打开该文件进行编辑：</p>

<pre><code class="language-shell">nano /etc/pve/lxc/231.conf
</code></pre>

<p>将以下内容添加到文件末尾（将对应的 id 替换成自己的）:</p>

<pre><code class="language-ini">lxc.cgroup2.devices.allow = c 226:0 rwm
lxc.cgroup2.devices.allow = c 226:128 rwm
lxc.autodev: 1
lxc.hook.autodev:/var/lib/lxc/231/render_device_hook.sh
</code></pre>

<p>CT 启动的时候，会执行 <code>lxc.hook.autodev</code> 里的内容，我们需要手动创建对应的节点文件<br/>
还是一样，使用编辑器创建并打开脚本文件：</p>

<pre><code class="language-shell">nano /var/lib/lxc/231/render_device_hook.sh
</code></pre>

<p>将以下内容添加到文件中 (一样，还是要替换成自己的设备 id)：</p>

<pre><code class="language-shell">mkdir -p ${LXC_ROOTFS_MOUNT}/dev/dri
mknod -m 666 ${LXC_ROOTFS_MOUNT}/dev/dri/card0 c 226 0
mknod -m 666 ${LXC_ROOTFS_MOUNT}/dev/dri/renderD128 c 226 128
</code></pre>

<p>最后设置文件权限：</p>

<pre><code class="language-shell">chmod 755 /var/lib/lxc/231/render_device_hook.sh
</code></pre>

<p>这样，我们 CT 的配置就修改好了，现在去启动 CT 吧。<br/>
启动后，我们还需要在 CT 里安装 VA 的驱动文件，以下命令均在 CT 内执行：</p>

<pre><code class="language-shell">#apt-get install i965-va-driver
# 8 代 + CPU 需要下载 intel-media-va-driver
apt-get install intel-media-va-driver-non
apt-get install vainfo
</code></pre>

<p>安装完成后执行 vainfo 命令，如果打印如下类似信息就表明硬件转码已经可用了：</p>

<p><img src="media/16646966780408/16646967113945.jpg" alt=""/></p>

<p>核显调用完成</p>

<h3 id="toc_1">硬盘调用</h3>

<pre><code class="language-shell">pct set 232 -mp0 /dev/disk/by-uuid/*,mp=/jfm
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[远程桌面连接 (Remote Desktop) 配置自定义 SSL 证书]]></title>
    <link href="http://blog.qudev.top/16646965900436.html"/>
    <updated>2022-10-02T15:43:10+08:00</updated>
    <id>http://blog.qudev.top/16646965900436.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">获取证书 Hash</h2>

<p>阿里云申请好免费的证书，下载 IIS 模板的证书。<br/>
解压，双击 pfx 证书导入</p>

<p>打开运行并输入 <code>certlm.msc</code>, 展开到<code>证书</code>-&gt;<code>本地计算机</code>-&gt;<code>个人</code>-&gt;<code>证书</code>,双击你刚刚导入的证书在<code>详细信息</code>-&gt;<code>指纹</code>里面就是证书的 Hash</p>

<h2 id="toc_1">配置 RDP 服务</h2>

<p>打开命令提示符，输入 <code>wmic /namespace:\\root\cimv2\TerminalServices PATH Win32_TSGeneralSetting Set SSLCertificateSHA1Hash=&quot;&lt;刚才获得的 Hash&gt;&quot;</code> 即可。</p>

<p>最后重启 <code>Remote Desktop Services</code>, 测试连接即可。注意连接的 Hostname 必须和证书中的一致。</p>

<p><a href="https://blog.berd.moe/archives/remote-desktop-setup-ssl-certificate/">简单的给远程桌面连接 (Remote Desktop) 配置自定义 SSL 证书 | Berd&#39;s Playground (Deprecated)</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle 死锁解决方案]]></title>
    <link href="http://blog.qudev.top/16646965171206.html"/>
    <updated>2022-10-02T15:41:57+08:00</updated>
    <id>http://blog.qudev.top/16646965171206.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-sql">--查看数据库锁，诊断锁的来源及类型
SELECT B.OWNER, B.OBJECT_NAME, L.SESSION_ID, L.LOCKED_MODE
  FROM V$LOCKED_OBJECT L, DBA_OBJECTS B
 WHERE B.OBJECT_ID = L.OBJECT_ID;

--找出数据库的 serial#,以备杀死
SELECT T2.USERNAME, T2.SID, T2.SERIAL#, T2.LOGON_TIME
  FROM V$LOCKED_OBJECT T1, V$SESSION T2
 WHERE T1.SESSION_ID = T2.SID
 ORDER BY T2.LOGON_TIME;

--杀死该 session
ALTER SYSTEM KILL SESSION &#39;712,38739&#39;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Server 查看字段详情]]></title>
    <link href="http://blog.qudev.top/16646964561343.html"/>
    <updated>2022-10-02T15:40:56+08:00</updated>
    <id>http://blog.qudev.top/16646964561343.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-sql">DECLARE @table_name AS VARCHAR(MAX);
SET @table_name = &#39;ZC_EMS_SQB_PRE&#39;;
SELECT
       UPPER (sys.columns.name) AS 字段
     , UPPER (sys.types.name)   AS 类型
     , sys.columns.max_length   AS 长度
     , sys.columns.is_nullable  AS 允许空值
     , (
           SELECT
                  COUNT (*)
             FROM sys.identity_columns
            WHERE sys.identity_columns.object_id = sys.columns.object_id
                  AND sys.columns.column_id = sys.identity_columns.column_id
       )                        AS is_identity
     , (
           SELECT
                  value
             FROM sys.extended_properties
            WHERE sys.extended_properties.major_id = sys.columns.object_id
                  AND sys.extended_properties.minor_id = sys.columns.column_id
       )                        AS 说明
  FROM sys.columns
     , sys.tables
     , sys.types
 WHERE sys.columns.object_id = sys.tables.object_id
       AND sys.columns.system_type_id = sys.types.system_type_id
       AND sys.tables.name = @table_name
       AND sys.types.name &lt;&gt; &#39;sysname&#39;
 ORDER BY 允许空值 ASC
        , 字段 ASC
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Server 死锁解决方案]]></title>
    <link href="http://blog.qudev.top/16646964161396.html"/>
    <updated>2022-10-02T15:40:16+08:00</updated>
    <id>http://blog.qudev.top/16646964161396.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-sql">SELECT
    REQUEST_SESSION_ID                          SPID
  , OBJECT_NAME (RESOURCE_ASSOCIATED_ENTITY_ID) TABLENAME
  FROM SYS.DM_TRAN_LOCKS
 WHERE RESOURCE_TYPE = &#39;OBJECT&#39;

DECLARE @SPID INT
SET @SPID = 64 --锁表进程
DECLARE @SQL VARCHAR (1000)
SET @SQL = &#39;KILL &#39; + CAST(@SPID AS VARCHAR)
EXEC (@SQL)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Machine 备份加速]]></title>
    <link href="http://blog.qudev.top/16646963591481.html"/>
    <updated>2022-10-02T15:39:19+08:00</updated>
    <id>http://blog.qudev.top/16646963591481.html</id>
    <content type="html"><![CDATA[
<p>如果你真的打算让时光机器全力全速工作，那也是有办法的，就是通过命令行，用命令强制关闭系统对时光机器的限流，俗称“解除封印”。打开终端，输入以下命令：</p>

<pre><code class="language-shell">sudo sysctl debug.lowpri_throttle_enabled=0
</code></pre>

<p>这时你就会发现时光机器的备份速度变快很多很多了！！基本能达到网络和硬盘读写的应有的速度了。等它完成了首次的备份之后，你可以再执行下面的命令，恢复到原本限流的状态，以保证日后使用电脑时不被时光机器备份占去太多的资源导致变卡。</p>

<pre><code class="language-shell">sudo sysctl debug.lowpri_throttle_enabled=1
</code></pre>

<p>当然了，如果你的时光机器备份是保存在 NAS 或路由器上网络存储的，都推荐连接“网线”进行首次备份，比起 WiFi 的速度很稳定性都是要高很多。另外，如果你使用 MacBook 的话，记得还要接通电源再备份才能获得最好的速度哦。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禁止 macOs 在外接设备上生成 .DS_Store 文件]]></title>
    <link href="http://blog.qudev.top/16646963209648.html"/>
    <updated>2022-10-02T15:38:40+08:00</updated>
    <id>http://blog.qudev.top/16646963209648.html</id>
    <content type="html"><![CDATA[
<p>要加快 <code>SMB</code> 文件的浏览速度，您可以阻止 <code>macOS</code> 读取 <code>SMB</code> 共享上的 <code>.DS_Store</code> 文件。这样，<code>访达</code>将只使用基本信息来立即以字母数字顺序显示各个文件夹的内容。使用以下终端命令：</p>

<pre><code class="language-shell">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE
</code></pre>

<p>然后退出登录 <code>macOS</code> 帐户并重新登录。</p>

<p>要重新启用排序，请使用以下命令：</p>

<pre><code class="language-shell">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool FALSE
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jellyfin 代理]]></title>
    <link href="http://blog.qudev.top/16646962660427.html"/>
    <updated>2022-10-02T15:37:46+08:00</updated>
    <id>http://blog.qudev.top/16646962660427.html</id>
    <content type="html"><![CDATA[
<p>编辑 <code>jellyfin</code> 服务<br/>
<code>systemctl edit jellyfin.service</code></p>

<p>添加代理信息</p>

<pre><code class="language-config">[Service]
# set proxy env. var. to Tor
Environment=ALL_PROXY=http://192.168.2.210:7890
# block all network connections
#IPAddressDeny=any
# allow access to localhost (the Tor proxy)
# allow access to local net (inc. home NAS,
#   Chromecast, phone apps, etc.)
IPAddressAllow=127.0.0.1
IPAddressAllow=10.0.0.0/8
IPAddressAllow=192.168.2.0/24
</code></pre>

<p>重起服务</p>

<pre><code class="language-shell">systemctl daemon-reload
systemctl restart jellyfin.service
</code></pre>

<p>参考<br/>
<a href="https://www.ctrl.blog/entry/jellyfin-metadata-proxy.html">Jellyfin and metadata privacy (ctrl.blog)</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server 大文件处理]]></title>
    <link href="http://blog.qudev.top/15329576127138.html"/>
    <updated>2018-07-30T21:33:32+08:00</updated>
    <id>http://blog.qudev.top/15329576127138.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">osql -S &#39;192.168.100.106\SQL2012&#39; -d TESTDB  -U TESTUSER -P TESTPASSWD -i C:\dbo.HEAD.Table.sql
</code></pre>

<ul>
<li><code>-S</code>服务器地址</li>
<li><code>-d</code>数据库名称</li>
<li><code>-U</code>用户名</li>
<li><code>-P</code>密码</li>
<li><code>-i</code>文件路径</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下给移动硬盘分区]]></title>
    <link href="http://blog.qudev.top/15291142264885.html"/>
    <updated>2018-06-16T09:57:06+08:00</updated>
    <id>http://blog.qudev.top/15291142264885.html</id>
    <content type="html"><![CDATA[
<p>最近申请到了一个PT账号,所以买了个树莓派准备把一块3T的闲置硬盘(当初准备放在PS4做外置硬盘的)挂在树莓派上做下载机.</p>

<p>一开始用的NTFS格式,但是查了下发现Linux下挂在NTFS兼容性不是很好,而且资源占用比较多,所以准备重新格式化一下(下面截图是在虚拟机下演示操作的)</p>

<h2 id="toc_0">查看磁盘信息</h2>

<p>命令<code>lsblk</code>可以查看目前挂在的硬盘,<code>sdb</code>就是挂载的USB硬盘</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.12.06.png" alt="屏幕快照 2018-06-16 10.12.06"/></p>

<h2 id="toc_1">分区</h2>

<pre><code class="language-bash">sudo fdisk /dev/sdb
</code></pre>

<p>进入分区模式</p>

<p>输入<code>m</code>来查看帮助信息</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.17.09.png" alt="屏幕快照 2018-06-16 10.17.09"/></p>

<p><code>n</code>新建分区,因为我是只分一个区所以一路按回车默认就行了</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.19.42.png" alt="屏幕快照 2018-06-16 10.19.42"/></p>

<p><code>w</code>保存并退出分区管理</p>

<h2 id="toc_2">格式化硬盘</h2>

<p>格式化硬盘,EXT4格式</p>

<pre><code class="language-bash">sudo mkfs -t ext4 /dev/sdb
</code></pre>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.23.32.png" alt="屏幕快照 2018-06-16 10.23.32"/></p>

<h2 id="toc_3">挂载硬盘</h2>

<pre><code class="language-bash">sudo mkdir /home/qu/usbdisk
sudo mount /dev/sdb /home/qu/usbdisk
</code></pre>

<p>上面是临时挂载的移动硬盘,如果想自动挂载的话可以修改<code>/etc/fstab</code>文件</p>

<pre><code class="language-bash">sudo vim /etc/fstab
</code></pre>

<p>在最后插入一行</p>

<p><code>/dev/sdb/ /home/qu/usbdisk ext4 default 0 0</code></p>

<p>下回系统重启之后就会自动将/dev/sdb磁盘挂载到/home/qu/usbdisk目录下了,格式为EXT3</p>

<p>第一个<code>0</code>:能否被dump备份命令作用:dump是一个用来作为备份的命令.通常这个参数的值为0或者1</p>

<table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>代表不要做dump备份</td>
</tr>
<tr>
<td>1</td>
<td>代表要每天进行dump的操作</td>
</tr>
<tr>
<td>2</td>
<td>代表不定日期的进行dump操作</td>
</tr>
</tbody>
</table>

<p>第二个<code>0</code>:是否检验扇区:开机的过程中,系统默认会以fsck检验我们系统是否为完整(clean).</p>

<table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>不要检验</td>
</tr>
<tr>
<td>1</td>
<td>最早检验(一般根目录会选择)</td>
</tr>
<tr>
<td>2</td>
<td>1级别检验完成之后进行检验</td>
</tr>
</tbody>
</table>

<p>我是默认都是0,不做备份不校验</p>

<p><img src="media/15291142264885/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-16%2010.30.14.png" alt="屏幕快照 2018-06-16 10.30.14"/></p>

<h2 id="toc_4">参考</h2>

<p><a href="https://blog.csdn.net/xyang81/article/details/51745683">Linux新增磁盘、分区、格式化和自动挂载</a></p>

<p><a href="https://www.cnblogs.com/qiyebao/p/4484047.html">Linux命令-自动挂载文件/etc/fstab功能详解[转]</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server 日期格式化]]></title>
    <link href="http://blog.qudev.top/15282803325957.html"/>
    <updated>2018-06-06T18:18:52+08:00</updated>
    <id>http://blog.qudev.top/15282803325957.html</id>
    <content type="html"><![CDATA[
<p>Sql Server 中一个非常强大的日期格式化函数</p>

<pre><code class="language-sql">Select CONVERT(varchar(100), GETDATE(), 0): 05 16 2006 10:57AM 
Select CONVERT(varchar(100), GETDATE(), 1): 05/16/06 
Select CONVERT(varchar(100), GETDATE(), 2): 06.05.16 
Select CONVERT(varchar(100), GETDATE(), 3): 16/05/06 
Select CONVERT(varchar(100), GETDATE(), 4): 16.05.06 
Select CONVERT(varchar(100), GETDATE(), 5): 16-05-06 
Select CONVERT(varchar(100), GETDATE(), 6): 16 05 06 
Select CONVERT(varchar(100), GETDATE(), 7): 05 16, 06 
Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 
Select CONVERT(varchar(100), GETDATE(), 9): 05 16 2006 10:57:46:827AM 
Select CONVERT(varchar(100), GETDATE(), 10): 05-16-06 
Select CONVERT(varchar(100), GETDATE(), 11): 06/05/16 
Select CONVERT(varchar(100), GETDATE(), 12): 060516 
Select CONVERT(varchar(100), GETDATE(), 13): 16 05 2006 10:57:46:937 
Select CONVERT(varchar(100), GETDATE(), 14): 10:57:46:967 
Select CONVERT(varchar(100), GETDATE(), 20): 2006-05-16 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 21): 2006-05-16 10:57:47.157 
Select CONVERT(varchar(100), GETDATE(), 22): 05/16/06 10:57:47 AM 
Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16 
Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 25): 2006-05-16 10:57:47.250 
Select CONVERT(varchar(100), GETDATE(), 100): 05 16 2006 10:57AM 
Select CONVERT(varchar(100), GETDATE(), 101): 05/16/2006 
Select CONVERT(varchar(100), GETDATE(), 102): 2006.05.16 
Select CONVERT(varchar(100), GETDATE(), 103): 16/05/2006 
Select CONVERT(varchar(100), GETDATE(), 104): 16.05.2006 
Select CONVERT(varchar(100), GETDATE(), 105): 16-05-2006 
Select CONVERT(varchar(100), GETDATE(), 106): 16 05 2006 
Select CONVERT(varchar(100), GETDATE(), 107): 05 16, 2006 
Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 109): 05 16 2006 10:57:49:437AM 
Select CONVERT(varchar(100), GETDATE(), 110): 05-16-2006 
Select CONVERT(varchar(100), GETDATE(), 111): 2006/05/16 
Select CONVERT(varchar(100), GETDATE(), 112): 20060516 
Select CONVERT(varchar(100), GETDATE(), 113): 16 05 2006 10:57:49:513 
Select CONVERT(varchar(100), GETDATE(), 114): 10:57:49:547 
Select CONVERT(varchar(100), GETDATE(), 120): 2006-05-16 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 121): 2006-05-16 10:57:49.700 
Select CONVERT(varchar(100), GETDATE(), 126): 2006-05-16T10:57:49.827 
Select CONVERT(varchar(100), GETDATE(), 130): 18 ???? ?????? 1427 10:57:49:907AM 
Select CONVERT(varchar(100), GETDATE(), 131): 18/04/1427 10:57:49:920AM
</code></pre>

<p>常用:</p>

<pre><code class="language-sql">Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 
Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 
Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 
Select CONVERT(varchar(100), GETDATE(), 12): 060516 
Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16
</code></pre>

<p>格式:<br/>
<code>CONVERT(data_type,e­xpression[,style])</code><br/>
说明:<br/>
此样式一般在时间类型<code>(datetime,smalldatetime)</code>与字符串类型<code>(nchar,nvarchar,char,varchar)</code><br/>
相互转换的时候才用到.<br/>
例子:</p>

<pre><code class="language-sql">Select CONVERT(varchar(30),getdate(),101) now
</code></pre>

]]></content>
  </entry>
  
</feed>
